{"version":3,"file":"hashmap.umd.min.js","sources":["../node_modules/core-js/internals/global.js","../node_modules/core-js/internals/fails.js","../node_modules/core-js/internals/classof-raw.js","../node_modules/core-js/internals/indexed-object.js","../node_modules/core-js/internals/require-object-coercible.js","../node_modules/core-js/internals/to-indexed-object.js","../node_modules/core-js/internals/descriptors.js","../node_modules/core-js/internals/is-object.js","../node_modules/core-js/internals/document-create-element.js","../node_modules/core-js/internals/ie8-dom-define.js","../node_modules/core-js/internals/an-object.js","../node_modules/core-js/internals/to-primitive.js","../node_modules/core-js/internals/object-define-property.js","../node_modules/core-js/internals/create-property-descriptor.js","../node_modules/core-js/internals/create-non-enumerable-property.js","../node_modules/core-js/internals/set-global.js","../node_modules/core-js/internals/shared-store.js","../node_modules/core-js/internals/shared.js","../node_modules/core-js/internals/to-object.js","../node_modules/core-js/internals/engine-v8-version.js","../node_modules/core-js/internals/has.js","../node_modules/core-js/internals/uid.js","../node_modules/core-js/internals/get-built-in.js","../node_modules/core-js/internals/path.js","../node_modules/core-js/internals/engine-user-agent.js","../node_modules/core-js/internals/object-create.js","../node_modules/core-js/internals/native-symbol.js","../node_modules/core-js/internals/use-symbol-as-uid.js","../node_modules/core-js/internals/well-known-symbol.js","../node_modules/core-js/internals/to-integer.js","../node_modules/core-js/internals/to-length.js","../node_modules/core-js/internals/to-absolute-index.js","../node_modules/core-js/internals/array-includes.js","../node_modules/core-js/internals/hidden-keys.js","../node_modules/core-js/internals/object-keys-internal.js","../node_modules/core-js/internals/enum-bug-keys.js","../node_modules/core-js/internals/object-keys.js","../node_modules/core-js/internals/object-define-properties.js","../node_modules/core-js/internals/html.js","../node_modules/core-js/internals/shared-key.js","../node_modules/core-js/internals/add-to-unscopables.js","../node_modules/core-js/internals/inspect-source.js","../node_modules/core-js/internals/internal-state.js","../node_modules/core-js/internals/native-weak-map.js","../node_modules/core-js/internals/object-property-is-enumerable.js","../node_modules/core-js/internals/object-get-own-property-descriptor.js","../node_modules/core-js/internals/redefine.js","../node_modules/core-js/internals/object-get-own-property-names.js","../node_modules/core-js/internals/object-get-own-property-symbols.js","../node_modules/core-js/internals/own-keys.js","../node_modules/core-js/internals/iterators-core.js","../node_modules/core-js/internals/copy-constructor-properties.js","../node_modules/core-js/internals/is-forced.js","../node_modules/core-js/internals/export.js","../node_modules/core-js/internals/correct-prototype-getter.js","../node_modules/core-js/internals/object-get-prototype-of.js","../node_modules/core-js/internals/set-to-string-tag.js","../node_modules/core-js/internals/create-iterator-constructor.js","../node_modules/core-js/internals/a-possible-prototype.js","../node_modules/core-js/internals/object-set-prototype-of.js","../node_modules/core-js/internals/define-iterator.js","../node_modules/core-js/modules/es.array.iterator.js","../node_modules/core-js/modules/web.dom-collections.iterator.js","../node_modules/core-js/internals/dom-iterables.js","../src/utils/index.js","../src/option/index.js","../src/hashmap/container.js","../src/hashmap/hashbuckets.js","../src/hashmap/hash.js","../src/hashmap/index.js","../src/linkedhashmap/index.js","../src/index.js"],"sourcesContent":["var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","var fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.12.1',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'\n});\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] < 4 ? 1 : match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n","var toObject = require('../internals/to-object');\n\nvar hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function hasOwn(it, key) {\n  return hasOwnProperty.call(toObject(it), key);\n};\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n","var path = require('../internals/path');\nvar global = require('../internals/global');\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","var global = require('../internals/global');\n\nmodule.exports = global;\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject -- old IE */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/engine-v8-version');\nvar fails = require('../internals/fails');\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  return !String(Symbol()) ||\n    // Chrome 38 Symbol has incorrect toString conversion\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n","/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar has = require('../internals/has');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) {\n      WellKnownSymbolsStore[name] = Symbol[name];\n    } else {\n      WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n    }\n  } return WellKnownSymbolsStore[name];\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.es/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","var toInteger = require('../internals/to-integer');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var toInteger = require('../internals/to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","module.exports = {};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar create = require('../internals/object-create');\nvar definePropertyModule = require('../internals/object-define-property');\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n","var store = require('../internals/shared-store');\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar objectHas = require('../internals/has');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var global = require('../internals/global');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n","'use strict';\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar setGlobal = require('../internals/set-global');\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  var state;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) {\n      createNonEnumerableProperty(value, 'name', key);\n    }\n    state = enforceInternalState(value);\n    if (!state.source) {\n      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');\n    }\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n});\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n","var getBuiltIn = require('../internals/get-built-in');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype[ITERATOR].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","var has = require('../internals/has');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n","var fails = require('../internals/fails');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar setGlobal = require('../internals/set-global');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty === typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","var has = require('../internals/has');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype : null;\n};\n","var defineProperty = require('../internals/object-define-property').f;\nvar has = require('../internals/has');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC) {\n  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n","/* eslint-disable no-proto -- safe */\nvar anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","'use strict';\nvar $ = require('../internals/export');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n  }\n  Iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.es/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.es/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.es/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.es/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","var global = require('../internals/global');\nvar DOMIterables = require('../internals/dom-iterables');\nvar ArrayIteratorMethods = require('../modules/es.array.iterator');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG]) {\n      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n    }\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n}\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","/*\r\n * Utils - Utility functions\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n */\r\n/**\r\n * Is the passed value not null and a function\r\n * @example <caption> test if its a function</caption>\r\n * const myFunc = () => 1 + 1;\r\n * Mootable.isFunction(myFunc) === true;\r\n * @example <caption> test if its not a function</caption>\r\n * const notAFunction = {};\r\n * Mootable.isFunction(notAFunction) === false;\r\n * @example <caption> test if its null</caption>\r\n * const notAFunction = null;\r\n * Mootable.isFunction(notAFunction) === false;\r\n * @param {function|*} func - the function/object to test\r\n * @returns {boolean} true if this is function and not null.\r\n */\r\nexport function isFunction(func) {\r\n    return !!(func && func.constructor && func.call && func.apply);\r\n}\r\n\r\n/**\r\n * Is the passed object iterable and not null, i.e. it has a function that has a type of\r\n * [Symbol.iterator]\r\n * @example <caption> test if its iterable</caption>\r\n * class MyIterable {\r\n *     * [Symbol.iterator]() {\r\n *         yield 1;\r\n *     }\r\n * }\r\n * Mootable.isIterable(new MyIterable()) === true;\r\n * @example <caption> test if its not an iterable</caption>\r\n * const notAnIterable = {};\r\n * Mootable.isIterable(notAnIterable) === false;\r\n * @example <caption> test if its null</caption>\r\n * const notAnIterable = null;\r\n * Mootable.isIterable(notAnIterable) === false;\r\n * @param {Iterable|*} iterable - the object to test\r\n * @return {boolean} true if this has a Symbol.iterator function\r\n */\r\nexport function isIterable(iterable) {\r\n    return !!(iterable && isFunction(iterable[Symbol.iterator]));\r\n}\r\n\r\n/**\r\n * Is the passed value is not null and is a string\r\n * @example <caption> test if its iterable</caption>\r\n * const myString = \"hello world\";\r\n * Mootable.isString(myString) === true;\r\n * @example <caption> test if its not an iterable</caption>\r\n * const notAString = {};\r\n * Mootable.isString(notAString) === false;\r\n * @example <caption> test if its null</caption>\r\n * const notAString = null;\r\n * Mootable.isString(notAString) === false;\r\n * @param {string|*} str - the string/object to test\r\n * @returns {boolean} true if this is a string\r\n */\r\nexport function isString(str) { // jshint ignore:line\r\n    return !!(str && (typeof str === 'string' || str instanceof String));\r\n}\r\n\r\n/**\r\n * sameValue is the result of Object.is.\r\n * The only difference between sameValue and sameValueZero is that +0 and -0 are considered different with sameValue.\r\n * @see {@link https://262.ecma-international.org/6.0/#sec-samevalue sameValue}\r\n * @function\r\n * @param x - the first object to compare\r\n * @param y - the second object to compare\r\n * @returns {boolean} - if they are equals according to {@link https://262.ecma-international.org/6.0/#sec-samevalue ECMA Spec for Same Value}\r\n */\r\nexport const sameValue = Object.is;\r\n\r\n/**\r\n * sameValueZero is the equality method used by Map, Array, Set etc.\r\n * The only difference between === and sameValueZero is that NaN counts as equal on sameValueZero\r\n * @see {@link https://262.ecma-international.org/6.0/#sec-samevaluezero saveValueZero}\r\n * @param x - the first object to compare\r\n * @param y - the second object to compare\r\n * @returns {boolean} - if they are equals according to {@link https://262.ecma-international.org/6.0/#sec-samevaluezero ECMA Spec for Same Value Zero}\r\n */\r\nexport function sameValueZero(x, y) {\r\n    return x === y || (Number.isNaN(x) && Number.isNaN(y));\r\n}\r\n\r\n/**\r\n * The abstract Equals method <code>==</code>.\r\n * Simply does an abstract equality comparison <code>==</code> against 2 values\r\n * @see {@link https://262.ecma-international.org/6.0/#sec-abstract-equality-comparison abstractEquals}\r\n * @param x - the first object to compare\r\n * @param y - the second object to compare\r\n * @returns {boolean} - if they are equals according to {@link https://262.ecma-international.org/6.0/#sec-abstract-equality-comparison ECMA Spec for Abstract Equality}\r\n */\r\nexport function abstractEquals(x, y) {\r\n    return x == y; // jshint ignore:line\r\n}\r\n\r\n/**\r\n * The strict Equals method <code>===</code>.\r\n * Simply does a strict equality comparison <code>===</code> against 2 values\r\n * @see {@link https://262.ecma-international.org/6.0/#sec-strict-equality-comparison strictEquals}\r\n * @param x - the first object to compare\r\n * @param y - the second object to compare\r\n * @returns {boolean} - if they are equals according to {@link https://262.ecma-international.org/6.0/#sec-strict-equality-comparison ECMA Spec for Strict Equality}\r\n */\r\nexport function strictEquals(x, y) {\r\n    return x === y;\r\n}\r\n\r\n/**\r\n * Counts the number of ones in a binary representation of a 32 bit integer.\r\n * @example <caption> count the number of bits set to one for the value 22</caption>\r\n * const myNumber = 22; // 10110 in binary\r\n * Mootable.hammingWeight(myNumber) === 3;\r\n * @example <caption> count the number of bits set to one for the value 12947</caption>\r\n * const myNumber = 12947; // 11001010010011 in binary\r\n * Mootable.hammingWeight(myNumber) === 7;\r\n * @see {@link https://en.wikipedia.org/wiki/Hamming_weight hammingWeight}\r\n * @param {number} flags 32 bit integer\r\n * @return {number} amount of ones.\r\n */\r\nexport function hammingWeight (flags) {\r\n    flags -= ((flags >>> 1) & 0x55555555);\r\n    flags = (flags & 0x33333333) + ((flags >>> 2) & 0x33333333);\r\n    return ((flags + (flags >> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\r\n}","/**\r\n * Option - a class to get round nullable fields.\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n * A representation of a value, that might be or might not be null.\r\n * - Options are immutable, once set, it can't be changed.\r\n * - Options are iterable\r\n *   - If using a for loop.\r\n *     - If it has a value the loop will execute just once.\r\n *     - If it doesn't have a value the loop will not execute\r\n * @example <caption>iterating over some</caption>\r\n * const opt = Option.some(\"hello\");\r\n * for (value of opt) {\r\n *    // loops once.\r\n *    console.log(opt);\r\n * }\r\n * console.log(\"world\");\r\n * // logs - hello\\nworld\r\n * @example <caption>iterating over none</caption>\r\n * const opt = Option.none;\r\n * for (value of opt) {\r\n *   // does not loop.\r\n *    console.log(opt);\r\n * }\r\n * console.log(\"world\");\r\n * // logs - world\r\n */\r\nexport class Option {\r\n\r\n    /**\r\n     * Usage of this constructor should generally be avoided,\r\n     * - instead use the some or none method on Option,\r\n     * - or the some or none exported functions provided with this javascript file.\r\n     * This constructor makes the Option immutable and inextensible.\r\n     * @see none\r\n     * @see some\r\n     * @param has - whether it contains a value or not.\r\n     * @param value - the value to set\r\n     */\r\n    constructor(has, value) {\r\n        this.has = has;\r\n        this.value = value;\r\n        Object.freeze(this);\r\n    }\r\n\r\n    /**\r\n     * A constant representation of an Option with nothing in it:\r\n     * <code>{value:undefined,has:false}</code>\r\n     * @example <caption>create an option using none</caption>\r\n     * const option = Option.none;\r\n     * // option.has === false\r\n     * // option.value === undefined\r\n     * // option.size === 0\r\n     * @type {Option}\r\n     */\r\n    static get none() {\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * Return the size of this option.\r\n     *  - 1 if it has a value\r\n     *  - 0 if it doesn't\r\n     * @return {number}\r\n     */\r\n    get size() {\r\n        return this.has ? 1 : 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * When called with a value returns an Option object of the form:\r\n     * <code>{value:value,has:true}</code>\r\n     * Even if a value is not provided it still counts as existing, this is different from other libraries,\r\n     * we are effectively saying, null and undefined count as valid values.\r\n     * @example <caption>create an option using some</caption>\r\n     * const myValue = 'hello';\r\n     * const option = Option.some(myValue);\r\n     * // option.has === true\r\n     * // option.value === 'hello'\r\n     * // option.size === 1\r\n     * @param value - the value\r\n     * @return {Option} - the option in the form <code>{value:value,has:true}</code>\r\n     */\r\n    static some(value) {\r\n        return some(value);\r\n    }\r\n\r\n    /**\r\n     * Provides an iterable for the Option\r\n     * If using a for loop.\r\n     * - If it has a value the loop will execute just once.\r\n     * - If it doesn't have a value the loop will not execute\r\n     * @example <caption>iterating over some</caption>\r\n     * const opt = Option.some(\"hello\");\r\n     * for (value of opt) {\r\n     *    // loops once.\r\n     *    console.log(opt);\r\n     * }\r\n     * console.log(\"world\");\r\n     * // logs - hello\\nworld\r\n     * @example <caption>iterating over none</caption>\r\n     * const opt = Option.none;\r\n     * for (value of opt) {\r\n     *   // does not loop.\r\n     *    console.log(opt);\r\n     * }\r\n     * console.log(\"world\");\r\n     * // logs - world\r\n     * @return {Generator<*, void, *>}\r\n     */\r\n    * [Symbol.iterator]() {\r\n        if (this.has) {\r\n            yield this.value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A function that when called with a value returns an Option object of the form:\r\n * <code>{value:value,has:true}</code>\r\n * Even if a value is not provided it still counts as existing, this is different from other libraries,\r\n * we are effectively saying that null and undefined count as valid values.\r\n * @example  <caption>create an option using some</caption>\r\n * const myValue = 'hello';\r\n * const option = some(myValue);\r\n * // option.has === true\r\n * // option.value === 'hello'\r\n * // option.size === 1\r\n * @type {function(*=): Option}\r\n */\r\nexport const some = (value) => new Option(true, value);\r\n\r\n/**\r\n * A constant representation of an Option with nothing in it:\r\n * <code>{value:undefined,has:false}</code>\r\n * @example <caption>create an option using none</caption>\r\n * const option = none;\r\n * // option.has === false\r\n * // option.value === undefined\r\n * // option.size === 0\r\n * @type {Option}\r\n */\r\nexport const none = new Option(false, undefined);\r\n","import {none, some} from '../option/';\r\n\r\n/**\r\n * HashMap Container Implementation for JavaScript\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n * Using an array this container stores key value pairs for our map.\r\n * This collection of entries is a leaf node of our Hash Array Trie.\r\n * As such all entries in the container will have the same hash. In most cases this will be single entry.\r\n * @private\r\n */\r\nexport class Container {\r\n\r\n    /**\r\n     * Constructs an empty container.\r\n     *\r\n     * @param [HashMap] map - the map this container belongs too.\r\n     * @param hash - the hash code for the keys in this container.\r\n     */\r\n    constructor(map, parent, hash) {\r\n        this.size = 0;\r\n        this.contents = [];\r\n        this.map = map;\r\n        this.parent = parent;\r\n        this.hash = hash;\r\n    }\r\n\r\n    /**\r\n     * Does the provided hash conflict with this one, i.e. is it different.\r\n     * This is used for ensuring only the correct keys are added.\r\n     *\r\n     * @param hash\r\n     * @return {boolean}\r\n     */\r\n    hashConflicts(hash) {\r\n        return hash !== this.hash;\r\n    }\r\n\r\n    /**\r\n     * Used to fetch the key and value.\r\n     *\r\n     * @param {*} key the key we use to retrieve the value.\r\n     * @param options must contain the equals function for this key.\r\n     * @return {*|undefined} the value for the key, or undefined if none available.\r\n     */\r\n    get(key, options) {\r\n        if (this.size !== 0) {\r\n            const equals = options.equals;\r\n            for (const entry of this.contents) {\r\n                if (entry && equals(key, entry[0])) {\r\n                    return entry[1];\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    optionalGet(key, options) {\r\n        if (this.size !== 0) {\r\n            const equals = options.equals;\r\n            const entry = this.contents.find(entry => equals(key, entry[0]));\r\n            if (entry) {\r\n                return some(entry[1]);\r\n            }\r\n        }\r\n        return none;\r\n    }\r\n\r\n    set(key, value, options) {\r\n        const equals = options.equals;\r\n        for (const entry of this.contents) {\r\n            if (equals(key, entry[0])) {\r\n                this.updateEntry(entry, value, options);\r\n                return;\r\n            }\r\n        }\r\n        this.createEntry(key, value, options);\r\n    }\r\n\r\n    emplace(key, handler, options) {\r\n        const equals = options.equals;\r\n        for (const entry of this.contents) {\r\n            if (equals(key, entry[0])) {\r\n                if('update' in handler) {\r\n                    const value =  handler.update(entry[1], key, this.map);\r\n                    this.updateEntry(entry, value, options);\r\n                    return value;\r\n                }\r\n                return entry[1];\r\n            }\r\n        }\r\n        const value = handler.insert(key, this.map);\r\n        this.createEntry(key, value, options);\r\n        return value;\r\n    }\r\n\r\n    createEntry(key, value) {\r\n        const entry = [key, value];\r\n        entry.parent = this;\r\n        this.contents.push(entry);\r\n        this.size += 1;\r\n        return entry;\r\n    }\r\n\r\n    updateEntry(entry, newValue) {\r\n        entry[1] = newValue;\r\n    }\r\n\r\n    deleteEntry(entry) {\r\n        const idx = this.contents.indexOf(entry);\r\n        if (idx !== -1) {\r\n            this.deleteIndex(idx);\r\n            let parent = this.parent;\r\n            while (parent) {\r\n                parent.size -= 1;\r\n                parent = parent.parent;\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteIndex(idx) {\r\n        this.size -= 1;\r\n        if (idx === 0) {\r\n            return this.contents.shift();\r\n        } else if (idx === this.size) {\r\n            return this.contents.pop();\r\n        } else {\r\n            return this.contents.splice(idx, 1)[0];\r\n        }\r\n    }\r\n\r\n    has(key, options) {\r\n        if (this.size !== 0) {\r\n            const equals = options.equals;\r\n            return this.contents.some(entry => equals(key, entry[0]));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    delete(key, options) {\r\n        const equals = options.equals;\r\n        const idx = this.contents.findIndex(entry => equals(key, entry[0]));\r\n\r\n        if (idx === -1) {\r\n            return false;\r\n        }\r\n        this.deleteIndex(idx);\r\n        return true;\r\n    }\r\n\r\n    * [Symbol.iterator]() {\r\n        for (const entry of this.contents) {\r\n            yield entry.slice();\r\n        }\r\n    }\r\n\r\n    * entriesRight() {\r\n        for (let idx = this.contents.length - 1; idx >= 0; idx--) {\r\n            yield this.contents[idx].slice();\r\n        }\r\n    }\r\n\r\n    * keys() {\r\n        for (const entry of this.contents) {\r\n            yield entry[0];\r\n        }\r\n    }\r\n\r\n    * values() {\r\n        for (const entry of this.contents) {\r\n            yield entry[1];\r\n        }\r\n    }\r\n\r\n    * keysRight() {\r\n        for (let idx = this.contents.length - 1; idx >= 0; idx--) {\r\n            yield this.contents[idx][0];\r\n        }\r\n    }\r\n\r\n    * valuesRight() {\r\n        for (let idx = this.contents.length - 1; idx >= 0; idx--) {\r\n            yield this.contents[idx][1];\r\n        }\r\n    }\r\n}","import {none} from '../option/';\r\nimport {hammingWeight} from '../utils/';\r\n\r\nconst SHIFT = 7;\r\nconst WIDTH = 1 << SHIFT;\r\nconst MASK = WIDTH - 1;\r\nconst DEPTH = 5;\r\n\r\nconst SHIFT_HAMT = 5;\r\nconst WIDTH_HAMT = 1 << SHIFT_HAMT;\r\nconst MASK_HAMT = WIDTH_HAMT - 1;\r\nconst DEPTH_HAMT = DEPTH - 1;\r\n\r\n/**\r\n * @private\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n */\r\nexport class HashBuckets {\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.buckets = [];\r\n        this.size = 0;\r\n    }\r\n\r\n    clear() {\r\n        this.buckets = [];\r\n        this.size = 0;\r\n    }\r\n\r\n    bucketFor(hash) {\r\n        const idx = hash & MASK;\r\n        if (idx < this.buckets.length) {\r\n            return this.buckets[idx];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    set(key, value, options) {\r\n        const hash = options.hash;\r\n        const idx = hash & MASK;\r\n        let bucket = this.buckets[idx];\r\n        if (!bucket) {\r\n            bucket = this.map.createContainer(this, hash);\r\n            bucket.createEntry(key, value,options);\r\n            this.buckets[idx] = bucket;\r\n            this.size += 1;\r\n            return;\r\n        } else if (bucket.hashConflicts(hash)) {\r\n            bucket = new HamtBuckets(this.map, this, DEPTH_HAMT, SHIFT).replacing(bucket);\r\n            this.buckets[idx] = bucket;\r\n        }\r\n        this.size -= bucket.size;\r\n        bucket.set(key, value, options);\r\n        this.size += bucket.size;\r\n    }\r\n\r\n    emplace(key, handler, options) {\r\n        const hash = options.hash;\r\n        const idx = hash & MASK;\r\n        let bucket = this.buckets[idx];\r\n        if (!bucket) {\r\n            bucket = this.map.createContainer(this, hash);\r\n            this.buckets[idx] = bucket;\r\n        } else if (bucket.hashConflicts(hash)) {\r\n            bucket = new HamtBuckets(this.map, this, DEPTH_HAMT, SHIFT).replacing(bucket);\r\n            this.buckets[idx] = bucket;\r\n        }\r\n        this.size -= bucket.size;\r\n        const value = bucket.emplace(key, handler, options);\r\n        this.size += bucket.size;\r\n        return value;\r\n    }\r\n\r\n    delete(key, options) {\r\n        const hash = options.hash;\r\n        const idx = hash & MASK;\r\n        const bucket = this.buckets[idx];\r\n        if (bucket) {\r\n            const deleted = bucket.delete(key, options);\r\n            if (deleted) {\r\n                this.size -= 1;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    get(key, options) {\r\n        const hash = options.hash;\r\n        const bucket = this.bucketFor(hash);\r\n        if (bucket) {\r\n            return bucket.get(key, options);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    optionalGet(key, options) {\r\n        const hash = options.hash;\r\n        const bucket = this.bucketFor(hash);\r\n        if (bucket) {\r\n            return bucket.optionalGet(key, options);\r\n        }\r\n        return none;\r\n    }\r\n\r\n    has(key, options) {\r\n        const hash = options.hash;\r\n        const bucket = this.bucketFor(hash);\r\n        if (bucket) {\r\n            return bucket.has(key, options);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    * [Symbol.iterator]() {\r\n        for (const bucket of this.buckets) {\r\n            if (bucket) {\r\n                yield* bucket;\r\n            }\r\n        }\r\n    }\r\n\r\n    * entriesRight() {\r\n        for (let idx = this.buckets.length - 1; idx >= 0; idx--) {\r\n            const bucket = this.buckets[idx];\r\n            if (bucket) {\r\n                yield* bucket.entriesRight();\r\n            }\r\n        }\r\n    }\r\n\r\n    * keys() {\r\n        for (const bucket of this.buckets) {\r\n            if (bucket) {\r\n                yield* bucket.keys();\r\n            }\r\n        }\r\n    }\r\n\r\n    * values() {\r\n        for (const bucket of this.buckets) {\r\n            if (bucket) {\r\n                yield* bucket.values();\r\n            }\r\n        }\r\n    }\r\n\r\n    * keysRight() {\r\n        for (let idx = this.buckets.length - 1; idx >= 0; idx--) {\r\n            const bucket = this.buckets[idx];\r\n            if (bucket) {\r\n                yield* bucket.keysRight();\r\n            }\r\n        }\r\n    }\r\n\r\n    * valuesRight() {\r\n        for (let idx = this.buckets.length - 1; idx >= 0; idx--) {\r\n            const bucket = this.buckets[idx];\r\n            if (bucket) {\r\n                yield* bucket.valuesRight();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport class HamtBuckets {\r\n    constructor(map, parent, depth, shift) {\r\n        this.map = map;\r\n        this.parent = parent;\r\n        this.buckets = [];\r\n        this.size = 0;\r\n        this.idxFlags = 0;\r\n        this.depth = depth;\r\n        this.shift = shift;\r\n    }\r\n\r\n    hashConflicts() {\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this.size = 0;\r\n        this.buckets = [];\r\n        this.idxFlags = 0;\r\n    }\r\n\r\n    bucketFor(hash) {\r\n        const idxFlags = this.idxFlags;\r\n        const hashIdx = (hash >>> this.shift) & MASK_HAMT;\r\n        const flag = 1 << hashIdx;\r\n        const idx = hammingWeight(idxFlags & (flag - 1));\r\n\r\n        if (idxFlags & flag) {\r\n            return this.buckets[idx];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    replacing(oldBucket) {\r\n        const new_flag = 1 << ((oldBucket.hash >>> this.shift) & MASK_HAMT);\r\n        this.idxFlags |= new_flag;\r\n        // shift the old bucket up a level. no need to splice its always going to be the first item.\r\n        this.buckets[0] = oldBucket;\r\n        this.size = oldBucket.size;\r\n        oldBucket.parent = this;\r\n        return this;\r\n    }\r\n\r\n    set(key, value, options) {\r\n        const hash = options.hash;\r\n        const idxFlags = this.idxFlags;\r\n        const hashIdx = (hash >>> this.shift) & MASK_HAMT;\r\n        const flag = 1 << hashIdx;\r\n        const idx = hammingWeight(idxFlags & (flag - 1));\r\n        let bucket;\r\n        if (idxFlags & flag) {\r\n            bucket = this.buckets[idx];\r\n            if (this.depth && bucket.hashConflicts(hash)) {\r\n                bucket = new HamtBuckets(this.map, this, this.depth - 1, this.shift + SHIFT_HAMT)\r\n                    .replacing(bucket);\r\n                this.buckets[idx] = bucket;\r\n            }\r\n            this.size -= bucket.size;\r\n            bucket.set(key, value, options);\r\n            this.size += bucket.size;\r\n        } else {\r\n            bucket = this.map.createContainer(this, hash);\r\n            bucket.createEntry(key, value,options);\r\n            this.buckets.splice(idx, 0, bucket);\r\n            this.idxFlags |= flag;\r\n            this.size += 1;\r\n        }\r\n    }\r\n\r\n    emplace(key, handler, options) {\r\n        const hash = options.hash;\r\n        const idxFlags = this.idxFlags;\r\n        const hashIdx = (hash >>> this.shift) & MASK_HAMT;\r\n        const flag = 1 << hashIdx;\r\n        const idx = hammingWeight(idxFlags & (flag - 1));\r\n        let bucket;\r\n        if (idxFlags & flag) {\r\n            bucket = this.buckets[idx];\r\n            if (this.depth && bucket.hashConflicts(hash)) {\r\n                bucket = new HamtBuckets(this.map, this, this.depth - 1, this.shift + SHIFT_HAMT)\r\n                    .replacing(bucket);\r\n                this.buckets[idx] = bucket;\r\n            }\r\n        } else {\r\n            bucket = this.map.createContainer(this, hash);\r\n            this.buckets.splice(idx, 0, bucket);\r\n            this.idxFlags |= flag;\r\n        }\r\n        this.size -= bucket.size;\r\n        const value = bucket.emplace(key, handler, options);\r\n        this.size += bucket.size;\r\n        return value;\r\n    }\r\n\r\n    delete(key, options) {\r\n        const hash = options.hash;\r\n        const idxFlags = this.idxFlags;\r\n        const hashIdx = (hash >>> this.shift) & MASK_HAMT;\r\n        const flag = 1 << hashIdx;\r\n        if (idxFlags & flag) {\r\n            const idx = hammingWeight(idxFlags & (flag - 1));\r\n            const bucket = this.buckets[idx];\r\n            const deleted = bucket.delete(key, options);\r\n            if (deleted) {\r\n                this.size -= 1;\r\n                if (bucket.size === 0) {\r\n                    if (idx === 0) {\r\n                        this.buckets.shift();\r\n                    } else if (this.buckets.length === idx+1) {\r\n                        this.buckets.pop();\r\n                    } else {\r\n                        this.buckets.splice(idx, 1);\r\n                    }\r\n                    this.idxFlags ^= flag;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    get(key, options) {\r\n        const hash = options.hash;\r\n        const bucket = this.bucketFor(hash);\r\n        if (bucket) {\r\n            return bucket.get(key, options);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    optionalGet(key, options) {\r\n        const hash = options.hash;\r\n        const bucket = this.bucketFor(hash);\r\n        if (bucket) {\r\n            return bucket.optionalGet(key, options);\r\n        }\r\n        return none;\r\n    }\r\n\r\n    has(key, options) {\r\n        const hash = options.hash;\r\n        const bucket = this.bucketFor(hash);\r\n        if (bucket) {\r\n            return bucket.has(key, options);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    * [Symbol.iterator]() {\r\n        for (const bucket of this.buckets) {\r\n            yield* bucket;\r\n        }\r\n    }\r\n\r\n    * entriesRight() {\r\n        for (let idx = this.buckets.length - 1; idx >= 0; idx--) {\r\n            yield* this.buckets[idx].entriesRight();\r\n        }\r\n    }\r\n\r\n    * keys() {\r\n        for (const bucket of this.buckets) {\r\n            yield* bucket.keys();\r\n        }\r\n    }\r\n\r\n    * values() {\r\n        for (const bucket of this.buckets) {\r\n            yield* bucket.values();\r\n        }\r\n    }\r\n    * keysRight() {\r\n        for (let idx = this.buckets.length - 1; idx >= 0; idx--) {\r\n            yield* this.buckets[idx].keysRight();\r\n        }\r\n    }\r\n\r\n    * valuesRight() {\r\n        for (let idx = this.buckets.length - 1; idx >= 0; idx--) {\r\n            yield* this.buckets[idx].valuesRight();\r\n        }\r\n    }\r\n}\r\n\r\n","import {sameValueZero, strictEquals, isFunction} from '../utils';\r\nimport {Option} from \"../option\";\r\n\r\n/*\r\n * Hash - Hash functions\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n */\r\n/**\r\n * Modified Murmur3 hash generator, with capped lengths.\r\n * This is NOT a cryptographic hash, this hash is designed to create as even a spread across a 32bit integer as is possible.\r\n * @see {@link https://github.com/aappleby/smhasher|MurmurHash specification on Github}\r\n * @see {@link https://en.wikipedia.org/wiki/MurmurHash|MurmurHash on Wikipedia}\r\n * @param key the string being hashed\r\n * @param len the max limit on the number of characters to hash\r\n * @param seed an optional random seed, or previous hash value to continue hashing against.\r\n * @returns {number} the hash\r\n */\r\nexport function hash(key, len = 0, seed = 0) {\r\n    len = len > 0 ? Math.min(len, key.length) : key.length;\r\n    seed |= 0;\r\n    const remaining = len & 1;\r\n    const doubleBytes = len - remaining;\r\n    let hash = seed, k = 0, i = 0;\r\n\r\n    while (i < doubleBytes) {\r\n        k = (key.charCodeAt(i++) & 0xffff) |\r\n            ((key.charCodeAt(i++) & 0xffff) << 16);\r\n        k *= 0xcc9e2d51;\r\n        k = (k << 15) | (k >>> 17);\r\n        k *= 0x1b873593;\r\n        hash ^= k;\r\n        hash = (hash << 13) | (hash >>> 19);\r\n        hash *= 5;\r\n        hash += 0xe6546b64;\r\n    }\r\n    if (remaining) {\r\n        k ^= (key.charCodeAt(i) & 0xffff);\r\n\r\n        k *= 0xcc9e2d51;\r\n        k = (k << 15) | (k >>> 17);\r\n        k *= 0x1b873593;\r\n        hash ^= k;\r\n    }\r\n\r\n    hash ^= len;\r\n    hash ^= hash >>> 16;\r\n    hash *= 0x85ebca6b;\r\n    hash ^= hash >>> 13;\r\n    hash *= 0xc2b2ae35;\r\n    hash ^= hash >>> 16;\r\n    return hash | 0;\r\n}\r\n\r\n/**\r\n * Given any object return back a hashcode\r\n * - If the key is undefined, null, false, NaN, infinite etc then it will be assigned a hash of 0.\r\n * - If it is a primitive such as string, number bigint it either take the numeric value, or the string value, and hash that.\r\n * - if it is a function, symbol or regex it hashes their string values.\r\n * - if it is a date, it uses the time value as the hash.\r\n * Otherwise\r\n * - If it has a hashCode function it will execute it, passing the key as the first and only argument. It will call this function again on its result.\r\n * - If it has a hashCode attribute it will call this function on it.\r\n * - If it can't do any of the above, it will assign a randomly generated hashcode, to the key using a hidden property.\r\n *\r\n * As with all hashmaps, there is a contractual equivalence between hashcode and equals methods,\r\n * in that any object that equals another, should produce the same hashcode.\r\n *\r\n * @param {*} key - the key to get the hash code from\r\n * @return {number} - the hash code.\r\n */\r\nexport function hashCodeFor(key) {\r\n    const keyType = typeof key;\r\n    switch (keyType) {\r\n        case 'undefined':\r\n            return 0;\r\n        case 'boolean':\r\n            return key ? 1 : 0;\r\n        case 'string':\r\n            return hash(key);\r\n        case 'number':\r\n            if (!Number.isFinite(key)) {\r\n                return 0;\r\n            }\r\n            if (Number.isSafeInteger(key)) {\r\n                return key | 0;\r\n            }\r\n            return hash(key.toString());\r\n        case 'bigint':\r\n        case 'symbol':\r\n        case 'function':\r\n            return hash(key.toString());\r\n        case 'object':\r\n        default: {\r\n            if (key === null) {\r\n                return 0;\r\n            }\r\n            if (key.hashCode) {\r\n                if (isFunction(key.hashCode)) {\r\n                    return hashCodeFor(key.hashCode(key));\r\n                }\r\n                return hashCodeFor(key.hashCode);\r\n            }\r\n\r\n\r\n            // Regexes and Dates we treat like primitives.\r\n            if (key instanceof Date) {\r\n                return key.getTime();\r\n            }\r\n            if (key instanceof RegExp) {\r\n                return hash(key.toString());\r\n            }\r\n\r\n            // Options we work on the values.\r\n            if (key instanceof Option) {\r\n                if (key.has) {\r\n                    return 31 * hashCodeFor(key.value);\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            // Hash of Last Resort, ensure we don't consider any objects on the prototype chain.\r\n            if (Object.prototype.hasOwnProperty.call(key, '_mootable_hashCode')) {\r\n                // its our special number, but just in case someone has done something a bit weird with it.\r\n                // Object equality at this point means that only this key instance can be used to fetch the value.\r\n                return hashCodeFor(key._mootable_hashCode);\r\n            }\r\n            const hashCode = HASH_COUNTER++;\r\n            // unenumerable, unwritable, unconfigurable\r\n            Object.defineProperty(key, '_mootable_hashCode', {\r\n                value: hashCode\r\n            });\r\n            return hashCode;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * an internal counter for managing unhashable objects.\r\n * @private\r\n * @ignore\r\n * @type {number}\r\n */\r\nlet HASH_COUNTER = 0;\r\n\r\n/**\r\n * Given a key, produce an equals method that fits the hashcode contract.\r\n * - In almost all cases it will return with ECMASpec sameValueZero method. As is the case with native map, set and array.\r\n * - If it is a regex, it compares the type, and the string values.\r\n * - If it is a date, it compares the type, and the time values.\r\n * - If it is an option, it compares if they both have values, and then the values.\r\n * - If it has an equals function and that equals function when comapring 2 keys, return true. then it will use that.\r\n *   - The function can either be in the form <code>key.equals(other)</code>, or <code>key.equals(other,key)</code> in the case of static-like functions.\r\n *\r\n * The expectation and requirement is this key will always be the first argument to the method, the behaviour maybe unexpected if parameters are reversed.\r\n *\r\n * As with all hashmaps, there is a contractual equivalence between hashcode and equals methods,\r\n * in that any object that equals another, should produce the same hashcode.\r\n *\r\n * @param {*} key - the key to get the hash code from\r\n * @return {(function(*, *): boolean)} - an equals function for 2 keys.\r\n */\r\nexport function equalsFor(key) {\r\n    // Regexes and Dates we treat like primitives.\r\n    switch (typeof key) {\r\n        case 'object':\r\n            if (key) {\r\n                if (key instanceof RegExp) {\r\n                    return (me, them) => {\r\n                        if (them instanceof RegExp) {\r\n                            return me.toString() === them.toString();\r\n                        }\r\n                        return false;\r\n                    };\r\n                } else if (key instanceof Date) {\r\n                    return (me, them) => {\r\n                        if (them instanceof Date) {\r\n                            return me.getTime() === them.getTime();\r\n                        }\r\n                        return false;\r\n                    };\r\n                } else if (key instanceof Option) {\r\n                    if (key.has) {\r\n                        const valueEquals = equalsFor(key.value);\r\n                        return (me, them) => {\r\n                            if (them.has) {\r\n                                return valueEquals(me.value, them.value);\r\n                            }\r\n                            return false;\r\n                        };\r\n                    } else {\r\n                        return (me, them) => !them.has;\r\n                    }\r\n                } else if (isFunction(key.equals)) {\r\n                    return (me, them) => me.equals(them, me);\r\n                }\r\n            }\r\n            return strictEquals;\r\n        case 'number':\r\n        case 'bigint':\r\n            return sameValueZero;\r\n        default:\r\n            return strictEquals;\r\n    }\r\n}\r\n\r\n/**\r\n * Given any object return back a hashcode\r\n * - If the key is undefined, null, false, NaN, infinite etc then it will be assigned a hash of 0.\r\n * - If it is a primitive such as string, number bigint it either take the numeric value, or the string value, and hash that.\r\n * - if it is a function, symbol or regex it hashes their string values.\r\n * - if it is a date, it uses the time value as the hash.\r\n * Otherwise\r\n * - If it has a hashCode function it will execute it, passing the key as the first and only argument. It will call this function again on its result.\r\n * - If it has a hashCode attribute it will call this function on it.\r\n * - If it can't do any of the above, it will assign a randomly generated hashcode, to the key using a hidden property.\r\n *\r\n * As with all hashmaps, there is a contractual equivalence between hashcode and equals methods,\r\n * in that any object that equals another, should produce the same hashcode.\r\n *\r\n * @param {*} key - the key to get the hash code from\r\n * @return {{hash: number, equals: function}} - the hash code and equals function.\r\n */\r\nexport function equalsAndHash(key, options) {\r\n    if (options) {\r\n        let hash = options.hash;\r\n        let equals = options.equals;\r\n        if (isFunction(hash)) {\r\n            hash = hash(key);\r\n        }\r\n        if (!Number.isSafeInteger(hash)) {\r\n            hash = hashCodeFor(key);\r\n        }\r\n        if (!isFunction(equals)) {\r\n            equals = equalsFor(key);\r\n        }\r\n        return {hash, equals};\r\n    }\r\n\r\n    const toSetOn = {};\r\n    const keyType = typeof key;\r\n    switch (keyType) {\r\n        case 'undefined':\r\n            toSetOn.hash = 0;\r\n            toSetOn.equals = strictEquals;\r\n            return toSetOn;\r\n        case 'boolean':\r\n            toSetOn.hash = key ? 1 : 0;\r\n            toSetOn.equals = strictEquals;\r\n            return toSetOn;\r\n        case 'string':\r\n            toSetOn.hash = hash(key);\r\n            toSetOn.equals = strictEquals;\r\n            return toSetOn;\r\n        case 'number':\r\n            if (!Number.isFinite(key)) {\r\n                toSetOn.hash = 0;\r\n                toSetOn.equals = sameValueZero;\r\n                return toSetOn;\r\n            }\r\n            if (Number.isSafeInteger(key)) {\r\n                toSetOn.hash = key | 0;\r\n                toSetOn.equals = sameValueZero;\r\n                return toSetOn;\r\n            }\r\n            toSetOn.hash = hash(key.toString());\r\n            toSetOn.equals = sameValueZero;\r\n            return toSetOn;\r\n        case 'bigint':\r\n            toSetOn.hash = hash(key.toString());\r\n            toSetOn.equals = sameValueZero;\r\n            return toSetOn;\r\n        case 'symbol':\r\n        case 'function':\r\n            toSetOn.hash = hash(key.toString());\r\n            toSetOn.equals = strictEquals;\r\n            return toSetOn;\r\n        case 'object':\r\n        default: {\r\n            if (key === null) {\r\n                toSetOn.hash = 0;\r\n                toSetOn.equals = strictEquals;\r\n                return toSetOn;\r\n            }\r\n            toSetOn.equals = equalsFor(key);\r\n            if (key.hashCode) {\r\n                if (isFunction(key.hashCode)) {\r\n                    toSetOn.hash = hashCodeFor(key.hashCode(key));\r\n                    return toSetOn;\r\n                } else {\r\n                    toSetOn.hash = hashCodeFor(key.hashCode);\r\n                    return toSetOn;\r\n                }\r\n            }\r\n\r\n            // Regexes and Dates we treat like primitives.\r\n            if (key instanceof Date) {\r\n                toSetOn.hash = key.getTime();\r\n                return toSetOn;\r\n            }\r\n            if (key instanceof RegExp) {\r\n                toSetOn.hash = hash(key.toString());\r\n                return toSetOn;\r\n            }\r\n\r\n            // Options we work on the values.\r\n            if (key instanceof Option) {\r\n                if (key.has) {\r\n                    toSetOn.hash = 31 * hashCodeFor(key.value);\r\n                    return toSetOn;\r\n                }\r\n                toSetOn.hash = 0;\r\n                return toSetOn;\r\n            }\r\n\r\n            // Hash of Last Resort, ensure we don't consider any objects on the prototype chain.\r\n            if (Object.prototype.hasOwnProperty.call(key, '_mootable_hashCode')) {\r\n                // its our special number, but just in case someone has done something a bit weird with it.\r\n                // Object equality at this point means that only this key instance can be used to fetch the value.\r\n                toSetOn.hash = hashCodeFor(key._mootable_hashCode);\r\n                return toSetOn;\r\n            }\r\n            const hashCode = HASH_COUNTER++;\r\n            // unenumerable, unwritable, unconfigurable\r\n            Object.defineProperty(key, '_mootable_hashCode', {\r\n                value: hashCode\r\n            });\r\n            toSetOn.hash = hashCode;\r\n            return toSetOn;\r\n        }\r\n    }\r\n}\r\n","import {isFunction, isIterable} from '../utils/';\r\nimport {Container} from \"./container\";\r\nimport {HashBuckets} from \"./hashbuckets\";\r\nimport {some, none} from \"../option\";\r\nimport {equalsAndHash, equalsFor} from './hash';\r\n\r\n/**\r\n * This HashMap is backed by a Hash array mapped trie.\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n */\r\nexport class HashMap {\r\n\r\n    /**\r\n     * This HashMap is backed by a Hash array mapped trie.\r\n     * - `new HashMap()` creates an empty hashmap\r\n     * - `new HashMap(copy:Iterable)` creates a hashmap which is a copy of the provided iterable.\r\n     *   - One of\r\n     *      - an object that provides a [Symbol.Iterator] function with the same signature as `Map.[Symbol.Iterator]`, such as `Map` or this `HashMap` and `LinkedHashMap`\r\n     *          - or a 2 dimensional key-value array, e.g. `[['key1','val1'], ['key2','val2']]`.\r\n     *      - an object that provides a entries function with the same signature as `Map.entries`, such as `Map` or this `HashMap` and `LinkedHashMap`\r\n     *      - an object that provides a forEach function with the same signature as `Map.forEach`, such as `Map` or this `HashMap` and `LinkedHashMap`\r\n     *\r\n     * Although this hashmap has no fixed guarantee on how it orders its elements, it does\r\n     * maintain an order, undecipherable as it maybe, first by hashcode, and then by by order of\r\n     * insertion. As such methods that iterate forwards and the equivalent backwards (Right)\r\n     * methods are correct in the order of which values returned, and are in reverse to one another.\r\n     *\r\n     * However these reverse methods are more valuable when used on an ordered map such as the\r\n     * {@link LinkedHashMap}, which maintains and provides control for the order of insertion.\r\n     *\r\n     * @example <caption>Create an empty HashMap</caption>\r\n     * const hashmap = new HashMap();\r\n     * // hashmap.size === 0;\r\n     * @example <caption>Create HashMap from an array of key value pairs</caption>\r\n     * const arr = [[1,'value1'],[2,'value2'],[3,'value3']];\r\n     * const hashmap = new HashMap(arr);\r\n     * // hashmap.size === 3;\r\n     * @example <caption>Create HashMap from another map</caption>\r\n     * const map = new Map([[1,'value1'],[2,'value2'],[3,'value3']])\r\n     * const hashmap = new HashMap(map);\r\n     * // hashmap.size === 3;\r\n     * @example <caption>Create HashMap from another HashMap</caption>\r\n     * const first = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']])\r\n     * const hashmap = new HashMap(first);\r\n     * // hashmap.size === 3;\r\n     * @example <caption>Create HashMap from a class with symbol iterator</caption>\r\n     * class MyIterable = {\r\n     *     *[Symbol.iterator] () {\r\n     *         yield [\"key1\", \"value1\"];\r\n     *         yield [\"key2\", \"value2\"];\r\n     *         yield [\"key3\", \"value3\"];\r\n     *         yield [\"key4\", \"value4\"];\r\n     *     }\r\n     * }\r\n     * const iterable = new MyIterable();\r\n     * const hashmap = new HashMap(iterable);\r\n     * // hashmap.size === 4;\r\n     * // it doesn't have to be a generator, an iterator works too.\r\n     * @example <caption>Create HashMap from an object with an entries generator function</caption>\r\n     * const entriesObj = {\r\n     *     entries: function* () {\r\n     *         yield [\"key1\", \"value1\"];\r\n     *         yield [\"key2\", \"value2\"];\r\n     *         yield [\"key3\", \"value3\"];\r\n     *         yield [\"key4\", \"value4\"];\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap(entriesObj);\r\n     * // hashmap.size === 4;\r\n     * // it doesn't have to be a generator, an iterator works too.\r\n     * @example <caption>Create HashMap from an object with a forEach function</caption>\r\n     * const forEachObj = {\r\n     *      forEach: (callback, ctx) => {\r\n     *              for (let i = 1; i <= 4; i++) {\r\n     *                  callback.call(ctx, 'value' + i, 'key' + i);\r\n     *              }\r\n     *      }\r\n     * };\r\n     * const hashmap = new HashMap(forEachObj);\r\n     * // hashmap.size === 4;\r\n     * @param {(Map|HashMap|LinkedHashMap|Iterable.<Array.<key,value>>|Object)} [copy]\r\n     */\r\n    constructor(copy) {\r\n        this.buckets = new HashBuckets(this);\r\n        if (copy) {\r\n            this.copy(copy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * User Defined Equals Method\r\n     * A user defined function to define an equals method against 2 keys.\r\n     * @callback HashMap#overrideEquals\r\n     * @param {*} firstKey - the first key.\r\n     * @param {*} secondKey - the second key\r\n     * @returns {boolean} is it equal or not\r\n     */\r\n\r\n    /**\r\n     * User Defined Hash Method\r\n     * A user defined function to describe how to hash a key.\r\n     * @callback HashMap#overrideHash\r\n     * @param {*} key - the first key.\r\n     * @returns {number} a 32 bit integer as a hash.\r\n     */\r\n\r\n    /**\r\n     * User defined hashing and equals methods\r\n     * HashMap will find the best fit for your objects, and if your keys themselves have the appropriate methods,\r\n     * then it will use them. However if you want to override that functionality this object allows you to do it.\r\n     * Not all functions and properties are used in every function, please refer to that function for details.\r\n     * If a function in future chooses to use one of the other properties or functions, it will NOT be marked as a breaking change.\r\n     * So be explicit.\r\n     * @typedef {Object} HashMap#overrides\r\n     * @property {number|HashMap#overrideHash} [hash] - The overriding hash value, or method to use.\r\n     * @property {HashMap#overrideEquals} [equals] - The overriding equals method to use\r\n     * @property {boolean} [reverse] - whether to search in reverse.\r\n     */\r\n\r\n\r\n    /**\r\n     * Emplace Update Method\r\n     * A user defined method to describe how to update our map.\r\n     * @callback HashMap#emplaceUpdate\r\n     * @param {*} oldValue - the oldValue to update.\r\n     * @param {*} key - the key to the entry.\r\n     * @param {HashMap} map - the hashmap.\r\n     * @returns {*} the new value to update the map with.\r\n     */\r\n\r\n    /**\r\n     * Emplace Insert Method\r\n     * A user defined method to describe how to insert into our map.\r\n     * @callback HashMap#emplaceInsert\r\n     * @param {*} key - the key to the entry.\r\n     * @param {HashMap} map - the hashmap.\r\n     * @returns {*} the new value we want to insert.\r\n     */\r\n\r\n    /**\r\n     * Emplace handler methods\r\n     * - Let M be this hashmap.\r\n     * - For each Record { [[Key]], [[Value]] } e that is an element of entries, do\r\n     *  - If Equal(e.[[Key]], key) is true, then\r\n     *   - If HasProperty(handler, \"update\") is true, then\r\n     *     - Let updateFn be ? Get(handler, \"update\").\r\n     *     - Let updated be ? Call(updateFn, handler, « e.[[Value]], key, M »).\r\n     *     - Set e.[[Value]] to updated.\r\n     *   - Return e.[[Value]].\r\n     * - Let insertFn be ? Get(handler, \"insert\").\r\n     * - Let inserted be ? Call(insertFn, handler, « e.[[Value]], key, M »).\r\n     * - Set e.[[Value]] to inserted.\r\n     * - Return e.[[Value]].\r\n     * @typedef {Object} HashMap#emplaceHandler\r\n     * @property {HashMap#emplaceUpdate} [update] - The update method to use.\r\n     * @property {HashMap#emplaceInsert} [insert] - The insert method to use\r\n     */\r\n\r\n    /**\r\n     * For Each Function\r\n     * A callback to execute on every <code>[key,value]</code> pair of this map iterable.\r\n     * @example <caption>log the keys and values</caption>\r\n     * const forEachFunction = (value, key) => console.log(key,value)\r\n     * @callback HashMap#ForEachCallback\r\n     * @param {*} [value] - the entry value.\r\n     * @param {*} [key] - the entry key\r\n     * @param {HashMap} [map] - the calling Map Iterable.\r\n     */\r\n\r\n    /**\r\n     * Test each element of the map to see if it matches and return\r\n     *  - true if the key and value match.\r\n     *  - false if it doesn't.\r\n     * @example <caption>Only match keys divisible by 2</caption>\r\n     * const myMatchPredicate = (value, key) => key % 2 === 0;\r\n     * @example <caption>Only match values which are equal to another key in the map</caption>\r\n     * const myMatchPredicate = (value, key, mapIterable) => mapIterable.has(value);\r\n     * @example <caption>An alternative implementation, (but potentially slower, and assumes no undefined value)</caption>\r\n     * const myMatchPredicate = (value, key, mapIterable) => mapIterable.indexOf(key) !== undefined;\r\n     * @callback HashMap#MatchesPredicate\r\n     * @param {*} [value] - the entry value.\r\n     * @param {*} [key] - the entry key\r\n     * @param {HashMap} [iterable] - the HashMap.\r\n     * @return {boolean} a value that coerces to true if it matches, or to false otherwise.\r\n     */\r\n\r\n    /**\r\n     * Reduce Function\r\n     * A callback to accumulate values from the HashMap <code>[key,value]</code> into a single value.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce|Array.reduce}\r\n     * @example <caption>add all the keys</caption>\r\n     * const reduceFunction = (accumulator, value, key) => accumulator+key\r\n     * @callback HashMap#ReduceFunction\r\n     * @param {*} [accumulator] - the value from the last execution of this function.\r\n     * @param {*} [value] - the entry value.\r\n     * @param {*} [key] - the entry key\r\n     * @param {HashMap} [hashmap] - the calling HashMap.\r\n     * @return {*} [accumulator] - the value to pass to the next time this function is called or the final return value.\r\n     */\r\n\r\n    /**\r\n     * Returns the number of elements in this hashmap.\r\n     *\r\n     * @example\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const size = hashmap.size;\r\n     * console.log(size);\r\n     * // logs: 3\r\n     * @return {number} the number of elements in the array\r\n     */\r\n    get size() {\r\n        return this.buckets.size;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of elements in this hashmap.\r\n     *\r\n     * @example\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const length = hashmap.length;\r\n     * console.log(length);\r\n     * // logs: 3\r\n     * @return {number} the number of elements in the array\r\n     */\r\n    get length() {\r\n        return this.buckets.size;\r\n    }\r\n\r\n    /**\r\n     * Does the map have this key.\r\n     * - return true if the <code>key</code> is in the map.\r\n     * - if no elements match, it returns false.\r\n     * - it is legitimate for keys to be null or undefined.\r\n     *\r\n     * Maps typically index keys, and so is generally a fast operation.\r\n     * @example <caption>Does this contain a key that is there</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const hasResult = hashmap.has(1);\r\n     * // hasResult === true\r\n     * @example <caption>Does this contain a key that isn't there</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const hasResult = hashmap.has(4);\r\n     * // hasResult === false\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap([[new NameKey('John','Smith'),'Librarian'],[new NameKey('Orlando','Keleshian'),'Engineer']]);\r\n     * const key = new NameKey('John','Smith');\r\n     * const hasResult = hashmap.has(key);\r\n     * // hasResult === true\r\n     * @example <caption>Advanced: using a custom hash and equals, to determine if there are entries for a specific hash</caption>\r\n     * const myHash = 3;\r\n     * const hashEquals = {hash: myHash, equals: () => true}\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const hasResult = hashmap.has(0, hashEquals);\r\n     * // hasResult === true\r\n     * // the hash of the number 3 is actually also 3. all 32 bit integers have the same hash.\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has|Map.has}\r\n     * @param {*} key - the matching key we use to identify if we have a match.\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hash and equals methods, rather than them being looked up.\r\n     * @returns {boolean} - if it holds the key or not.\r\n     */\r\n    has(key, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        return this.buckets.has(key, op);\r\n    }\r\n\r\n    /**\r\n     * Get a value from the map using this key.\r\n     * - return the first <code>value</code> from the <code>[key,value]</code> pair that matches the key.\r\n     * - if no elements match, it returns undefined.\r\n     * - it is legitimate for keys to be null or undefined, and if set, will find a value.\r\n     * - it is also legitimate for values to be null or undefined, as such get should never be used as an existence check. {@see HashMap#optionalGet}\r\n     * Also provides a way to override both the equals and the hash\r\n     * Performance:\r\n     *  - will be O(1) approaching O(log n)\r\n     * @example <caption>What is the value for a key</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const getResult = hashmap.get(1);\r\n     * // getResult === 'value1'\r\n     * @example <caption>What is the value for a key that isn't there</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const getResult = hashmap.get(4);\r\n     * // getResult === undefined\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap([[new NameKey('John','Smith'),'Librarian'],[new NameKey('Orlando','Keleshian'),'Engineer']]);\r\n     * const key = new NameKey('John','Smith');\r\n     * const getResult = hashmap.get(key);\r\n     * // getResult === 'Librarian'\r\n     * @example <caption>Advanced: using a custom hash and equals, to get the first entry for a specific hash</caption>\r\n     * const myHash = 3;\r\n     * const hashEquals = {hash: myHash, equals: () => true}\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const getResult = hashmap.get(0, hashEquals);\r\n     * // getResult === 'value3'\r\n     * // the hash of the number 3 is actually also 3. all 32 bit integers have the same hash.\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get|Map.get}\r\n     * @param {*} key - the matching key we use to identify if we have a match.\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.\r\n     * @returns {*} - the value of the element that matches.\r\n     */\r\n    get(key, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        return this.buckets.get(key, op);\r\n    }\r\n\r\n    /**\r\n     * Get the key from the map using the provided value. Since values are not hashed, this has to check each value in the map until a value matches, or the whole map, if none match. As such this is a slow operation.\r\n     * Performance O(n) as we have to iterate over the whole map, to find each value and perform\r\n     * an equality against it.\r\n     * @example <caption>What is the key for a value</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const keyOfResult = hashmap.keyOf('value2');\r\n     * // keyOfResult === 2\r\n     * @example <caption>What is the value for a key that isn't there</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const keyOfResult = hashmap.keyOf('value4');\r\n     * // keyOfResult === undefined\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap([[new NameKey('John','Smith'),'Librarian'],[new NameKey('Orlando','Keleshian'),'Engineer']]);\r\n     * const keyOfResult = hashmap.keyOf('Engineer');\r\n     * // getResult ~ NameKey('Orlando','Keleshian')\r\n     * @example <caption>Advanced: using a custom equals, to get the first key in the\r\n     * hashmap</caption>\r\n     * const myEquals = {equals: () => true}\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const keyOfResult = hashmap.keyOf(0, myEquals);\r\n     * // keyOfResult === 1\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf Array.indexOf}\r\n     * @param {*} value - The value we are searching the map for\r\n     * @param {HashMap#overrides<equals>} [overrides] - an optional override to allow a user to\r\n     * define the equals methods, rather than it being looked up on the value.\r\n     * @return {*|undefined} the first key for this value or undefined\r\n     */\r\n    keyOf(value, overrides) {\r\n        const equals = overrides && isFunction(overrides.equals) ? overrides.equals : this.equalsFor(value);\r\n        for (const entry of this.entries()) {\r\n            if (equals(value, entry[1])) {\r\n                return entry[0];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get the key from the map using the provided value, searching the map in reverse. Since values\r\n     * are not hashed, this has to check each value in the map until a value matches, or the\r\n     * whole map, if none match. As such this is a slow operation.\r\n     * Performance O(n) as we have to iterate over the whole map, to find each value and perform\r\n     * an equality against it.\r\n     * @example <caption>What is the key for a value</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const lastKeyOfResult = hashmap.lastKeyOf('value2');\r\n     * // lastKeyOfResult === 2\r\n     * @example <caption>What is the value for a key that isn't there</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const lastKeyOfResult = hashmap.lastKeyOf('value4');\r\n     * // lastKeyOfResult === undefined\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap([[new NameKey('John','Smith'),'Librarian'],[new NameKey('Orlando','Keleshian'),'Engineer']]);\r\n     * const lastKeyOfResult = hashmap.lastKeyOf('Engineer');\r\n     * // getResult ~ NameKey('Orlando','Keleshian')\r\n     * @example <caption>Advanced: using a custom equals, to get the last key in the\r\n     * hashmap</caption>\r\n     * const myEquals = {equals: () => true}\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const lastKeyOfResult = hashmap.lastKeyOf(0, myEquals);\r\n     * // lastKeyOfResult === 3\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf Array.lastIndexOf}\r\n     * @param {*} value - The value we are searching the map for, (in reverse)\r\n     * @param {HashMap#overrides<equals>} [overrides] - an optional override to allow a user to\r\n     * define the equals methods, rather than it being looked up on the value.\r\n     * @return {*|undefined} the last key for this value or undefined\r\n     */\r\n    lastKeyOf(value, overrides) {\r\n        const equals = overrides && isFunction(overrides.equals) ? overrides.equals : this.equalsFor(value);\r\n        for (const entry of this.entriesRight()) {\r\n            if (equals(value, entry[1])) {\r\n                return entry[0];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get the key from the map using the provided value, and wrap it in an {@link Option}.\r\n     * Since values are not hashed, this has to check each value in the map until a value\r\n     * matches, or the whole map, if none match. As such this is a slow operation.\r\n     * Performance O(n) as we have to iterate over the whole map, to find each value and perform\r\n     * an equality against it.\r\n     * @example <caption>What is the key for a value</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const optionalKeyOfResult = hashmap.optionalKeyOf('value2');\r\n     * // optionalKeyOfResult === Option.some(2)\r\n     * @example <caption>What is the value for a key that isn't there</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const optionalKeyOfResult = hashmap.optionalKeyOf('value4');\r\n     * // optionalKeyOfResult === Option.none\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap([[new NameKey('John','Smith'),'Librarian'],[new NameKey('Orlando','Keleshian'),'Engineer']]);\r\n     * const optionalKeyOfResult = hashmap.optionalKeyOf('Engineer');\r\n     * // getResult ~ Option.some(NameKey('Orlando','Keleshian'))\r\n     * @example <caption>Advanced: using a custom equals, to get the first key in the\r\n     * hashmap</caption>\r\n     * const myEquals = {equals: () => true}\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const optionalKeyOfResult = hashmap.optionalKeyOf(0, myEquals);\r\n     * // optionalKeyOfResult === Option.some(1)\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link Option.some}\r\n     * @see {@link Option.none}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf Array.indexOf}\r\n     * @param {*} value - The value we are searching the map for\r\n     * @param {HashMap#overrides<equals>} [overrides] - an optional overrides to allow a user to\r\n     * define the equals methods, rather than it being looked up on the value.\r\n     * @return {Option} the first key for this value or none\r\n     */\r\n    optionalKeyOf(value, overrides) {\r\n        const equals = overrides && isFunction(overrides.equals) ? overrides.equals : this.equalsFor(value);\r\n        for (const entry of this.entries()) {\r\n            if (equals(value, entry[1])) {\r\n                return some(entry[0]);\r\n            }\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * Get the key from the map using the provided value, searching the map in reverse. Since values\r\n     * are not hashed, this has to check each value in the map until a value matches, or the\r\n     * whole map, if none match. As such this is a slow operation.\r\n     * Performance O(n) as we have to iterate over the whole map, to find each value and perform\r\n     * an equality against it.\r\n     * @example <caption>What is the key for a value</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const optionalLastKeyOfResult = hashmap.optionalLastKeyOf('value2');\r\n     * // optionalLastKeyOfResult === Option.some(2)\r\n     * @example <caption>What is the value for a key that isn't there</caption>\r\n     * const hashmap = new LinkedHashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const optionalLastKeyOfResult = hashmap.optionalLastKeyOf('value4');\r\n     * // optionalLastKeyOfResult === Option.none\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap([[new NameKey('John','Smith'),'Librarian'],[new NameKey('Orlando','Keleshian'),'Engineer']]);\r\n     * const optionalLastKeyOfResult = hashmap.optionalLastKeyOf('Engineer');\r\n     * // getResult ~ Option.some(NameKey('Orlando','Keleshian'))\r\n     * @example <caption>Advanced: using a custom equals, to get the last key in the\r\n     * hashmap</caption>\r\n     * const myEquals = {equals: () => true}\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const optionalLastKeyOfResult = hashmap.optionalLastKeyOf(0, myEquals);\r\n     * // optionalLastKeyOfResult === Option.some(3)\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link Option.some}\r\n     * @see {@link Option.none}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf Array.lastIndexOf}\r\n     * @param {*} value - The value we are searching the map for, (in reverse)\r\n     * @param {HashMap#overrides<equals>} [overrides] - an optional overrides to allow a user to\r\n     * define the equals methods, rather than it being looked up on the value.\r\n     * @return {Option} the last key for this value or none\r\n     */\r\n    optionalLastKeyOf(value, overrides) {\r\n        const equals = overrides && isFunction(overrides.equals) ? overrides.equals : this.equalsFor(value);\r\n        for (const entry of this.entriesRight()) {\r\n            if (equals(value, entry[1])) {\r\n                return some(entry[0]);\r\n            }\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * Get an optional value from the map. This is effectively a more efficent combination of calling has and get at the same time.\r\n     * - return the first <code>some(value)</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns <code>none()</code>.\r\n     * - it is legitimate for keys to be null or undefined, and if set, will still acknowledge it exists, against the key.\r\n     *\r\n     * Maps typically index keys, and so is generally a fast operation.\r\n     * @example <caption>What is the value for a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const getResult = hashmap.optionalGet(1);\r\n     * // getResult === Option.some('value1') {value:'value1',has:true}\r\n     * @example <caption>What is the value for a key that isn't there</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const getResult = hashmap.optionalGet(4);\r\n     * // getResult === Option.none {has:false}\r\n     * @example <caption>What is the value for a key with an undefined value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,undefined],[3,'value3']]);\r\n     * const getResult = hashmap.optionalGet(2);\r\n     * // getResult === Option.some(undefined) {value:undefined,has:true}\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap([[new NameKey('John','Smith'),'Librarian'],[new NameKey('Orlando','Keleshian'),'Engineer']]);\r\n     * const key = new NameKey('John','Smith');\r\n     * const getResult = hashmap.optionalGet(key);\r\n     * // getResult === Option.some('Librarian') {value:'Librarian',has:true}\r\n     * @example <caption>Advanced: using a custom hash and equals, to get the first entry for a specific hash</caption>\r\n     * const myHash = 3;\r\n     * const hashEquals = {hash: myHash, equals: () => true}\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const getResult = hashmap.optionalGet(0, hashEquals);\r\n     * // getResult === Option.some('value3')  {value:'value3',has:true}\r\n     * // the hash of the number 3 is actually also 3. all 32 bit integers have the same hash.\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link Option.some}\r\n     * @see {@link Option.none}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get|Map.get}\r\n     * @param {*} key - the key we use to identify if we have a match.\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.\r\n     * @returns {Option} - an optional result.\r\n     */\r\n    optionalGet(key, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        return this.buckets.optionalGet(key, op);\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the map which passes the provided <code>MatchesPredicate</code>.\r\n     * - return the first <code>value</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first value it finds.\r\n     * @example <caption>Find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.endsWith('ue2'));\r\n     * // findResult === 'value2'\r\n     * @example <caption>Can't find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.startsWith('something'));\r\n     * // findResult === undefined\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find|Array.find}\r\n     * @param {HashMap#MatchesPredicate} [findPredicate=(value, key, iterable) => value] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findPredicate</code>\r\n     * @returns {*} - the value of the element that matches.\r\n     */\r\n    find(findPredicate = () => true, thisArg = undefined) {\r\n        for (const [key, value] of this.entries()) {\r\n            if (findPredicate.call(thisArg, value, key, this)) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the map which passes the provided <code>MatchesPredicate</code>.\r\n     * - return the first <code>value</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first value it finds.\r\n     * @example <caption>Find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.endsWith('ue2'));\r\n     * // findResult === 'value2'\r\n     * @example <caption>Can't find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.startsWith('something'));\r\n     * // findResult === undefined\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find|Array.find}\r\n     * @param {HashMap#MatchesPredicate} [findPredicate=(value, key, iterable) => value] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findPredicate</code>\r\n     * @returns {*} - the value of the element that matches.\r\n     */\r\n    findLast(findPredicate = () => true, thisArg = undefined) {\r\n        for (const [key, value] of this.entriesRight()) {\r\n            if (findPredicate.call(thisArg, value, key, this)) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the map which passes the provided <code>MatchesPredicate</code>.\r\n     * - return the first <code>value</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first value it finds.\r\n     * @example <caption>Find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.endsWith('ue2'));\r\n     * // findResult === 'value2'\r\n     * @example <caption>Can't find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.startsWith('something'));\r\n     * // findResult === undefined\r\n     * @see {@link Option.some}\r\n     * @see {@link Option.none}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find|Array.find}\r\n     * @param {HashMap#MatchesPredicate} [findPredicate=(value, key, iterable) => value] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findPredicate</code>\r\n     * @returns {*} - the value of the element that matches.\r\n     */\r\n    optionalFind(findPredicate = () => true, thisArg = undefined) {\r\n        for (const [key, value] of this.entries()) {\r\n            if (findPredicate.call(thisArg, value, key, this)) {\r\n                return some(value);\r\n            }\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the map which passes the provided <code>MatchesPredicate</code>.\r\n     * - return the first <code>value</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first value it finds.\r\n     * @example <caption>Find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.endsWith('ue2'));\r\n     * // findResult === 'value2'\r\n     * @example <caption>Can't find a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findResult = hashmap.find((value) => value.startsWith('something'));\r\n     * // findResult === undefined\r\n     * @see {@link Option.some}\r\n     * @see {@link Option.none}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find|Array.find}\r\n     * @param {HashMap#MatchesPredicate} [findPredicate=(value, key, iterable) => value] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findPredicate</code>\r\n     * @returns {*} - the value of the element that matches.\r\n     */\r\n    optionalFindLast(findPredicate = () => true, thisArg = undefined) {\r\n        for (const [key, value] of this.entriesRight()) {\r\n            if (findPredicate.call(thisArg, value, key, this)) {\r\n                return some(value);\r\n            }\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the key which passes the provided  <code>MatchesPredicate</code>.\r\n     * - return the first <code>key</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first key it finds.\r\n     *\r\n     * @example <caption>Find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.endsWith('ue2'));\r\n     * // findIndexResult === 2\r\n     * @example <caption>Can't find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.startsWith('something'));\r\n     * // findIndexResult === undefined\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex|Array.findIndex}\r\n     * @param {HashMap#MatchesPredicate} [findKeyPredicate=(value, key, iterable) => key] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findKeyPredicate</code>\r\n     * @returns {*} - the key of the element that matches..\r\n     */\r\n    findKey(findKeyPredicate = (value, key) => key, thisArg = undefined) {\r\n        for (const [key, value] of this.entries()) {\r\n            if (findKeyPredicate.call(thisArg, value, key, this)) {\r\n                return key;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the key which passes the provided  <code>MatchesPredicate</code>.\r\n     * - return the first <code>key</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first key it finds.\r\n     *\r\n     * @example <caption>Find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.endsWith('ue2'));\r\n     * // findIndexResult === 2\r\n     * @example <caption>Can't find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.startsWith('something'));\r\n     * // findIndexResult === undefined\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex|Array.prototype.findIndex}\r\n     * @param {HashMap#MatchesPredicate} [findKeyPredicate=(value, key, iterable) => key] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findKeyPredicate</code>\r\n     * @returns {*} - the key of the element that matches..\r\n     */\r\n    findLastKey(findKeyPredicate = (value, key) => key, thisArg = undefined) {\r\n        for (const [key, value] of this.entriesRight()) {\r\n            if (findKeyPredicate.call(thisArg, value, key, this)) {\r\n                return key;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the key which passes the provided  <code>MatchesPredicate</code>.\r\n     * - return the first <code>key</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first key it finds.\r\n     *\r\n     * @example <caption>Find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.endsWith('ue2'));\r\n     * // findIndexResult === 2\r\n     * @example <caption>Can't find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.startsWith('something'));\r\n     * // findIndexResult === undefined\r\n     * @see {@link Option.some}\r\n     * @see {@link Option.none}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex|Array.prototype.findIndex}\r\n     * @param {HashMap#MatchesPredicate} [findKeyPredicate=(value, key, iterable) => key] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findKeyPredicate</code>\r\n     * @returns {*} - the key of the element that matches..\r\n     */\r\n    optionalFindKey(findKeyPredicate = (value, key) => key, thisArg = undefined) {\r\n        for (const [key, value] of this.entries()) {\r\n            if (findKeyPredicate.call(thisArg, value, key, this)) {\r\n                return some(key);\r\n            }\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * Find the first value in the key which passes the provided  <code>MatchesPredicate</code>.\r\n     * - return the first <code>key</code> from the <code>[key,value]</code> pair that matches\r\n     * - if no elements match, it returns undefined.\r\n     * - if no predicate is defined, will return the first key it finds.\r\n     *\r\n     * @example <caption>Find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.endsWith('ue2'));\r\n     * // findIndexResult === 2\r\n     * @example <caption>Can't find a key</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const findIndexResult = hashmap.findIndex((value) => value.startsWith('something'));\r\n     * // findIndexResult === undefined\r\n     * @see {@link Option.some}\r\n     * @see {@link Option.none}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex|Array.prototype.findIndex}\r\n     * @param {HashMap#MatchesPredicate} [findKeyPredicate=(value, key, iterable) => key] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>findKeyPredicate</code>\r\n     * @returns {*} - the key of the element that matches..\r\n     */\r\n    optionalFindLastKey(findKeyPredicate = (value, key) => key, thisArg = undefined) {\r\n        for (const [key, value] of this.entriesRight()) {\r\n            if (findKeyPredicate.call(thisArg, value, key, this)) {\r\n                return some(key);\r\n            }\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * Sets a value onto this map, using the key as its reference.\r\n     *\r\n     * @example <caption>set a value</caption>\r\n     * const hashmap = new HashMap();\r\n     * hashmap.set(1,'value1');\r\n     * const hasResult = hashmap.has(1);\r\n     * // hasResult === true\r\n     * @example <caption>>overwrite a value</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2']]);\r\n     * hashmap.set(2,'other');\r\n     * const getResult = hashmap.get(2);\r\n     * // getResult === 'other'\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const hashmap = new HashMap();\r\n     * hashmap.set(new NameKey('John','Smith'),'Librarian');\r\n     * const hasResult = hashmap.has(new NameKey('John','Smith'));\r\n     * // hasResult === true\r\n     * @example <caption>Advanced: using a custom hash and equals, to set a value to a specific\r\n     * hash</caption>\r\n     * const hashmap = new HashMap();\r\n     * hashmap.set(1,'value1', {hash: 3});\r\n     * const hasResult = hashmap.has(3, {equals: () => true} );\r\n     * // hasResult === true\r\n     * // the hash of the number 3 is actually also 3. all 32 bit integers have the same hash.\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set|Map.prototype.set}\r\n     * @param {*} key - the key we want to key our value to\r\n     * @param {*} value - the value we are setting\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.\r\n     * @return {HashMap} this hashmap\r\n     */\r\n    set(key, value, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        this.buckets.set(key, value, op);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Given a key and a handler object, the emplace method will either remap an existing entry,\r\n     * insert a new entry from a mapping function, or both. emplace will return the updated or\r\n     * inserted value.\r\n     * @example <caption>insert into the map</caption>\r\n     * const hashmap = new HashMap();\r\n     * const handler = {\r\n     *     update: () => {\r\n     *         return 'update';\r\n     *     },\r\n     *     insert: (key, map) => {\r\n     *         return 'insert';\r\n     *     }\r\n     * };\r\n     * const ret = hashmap.emplace('key', handler)\r\n     * // hashmap = [['key', 'insert']]\r\n     * // ret === 'insert'\r\n     * @example <caption>update the map</caption>\r\n     * const hashmap = new HashMap([['key','value']]);\r\n     * const handler = {\r\n     *     update: () => {\r\n     *         return 'update';\r\n     *     },\r\n     *     insert: (key, map) => {\r\n     *         return 'insert';\r\n     *     }\r\n     * };\r\n     * const ret = hashmap.emplace('key', handler)\r\n     * // hashmap = [['key', 'update']]\r\n     * // ret === 'update'\r\n     * @example <caption>insert into the map if the key already exists without an update</caption>\r\n     * const hashmap = new HashMap([['key','value']]);\r\n     * const handler = {\r\n     *     insert: (key, map) => {\r\n     *         return 'insert';\r\n     *     }\r\n     * };\r\n     * const ret = hashmap.emplace('key', handler)\r\n     * // hashmap = [['key', 'value']]\r\n     * // ret === 'value'\r\n     * @example <caption>update into the map without an insert method (throws an error)</caption>\r\n     * const hashmap = new HashMap([['key','value']]);\r\n     * const handler = {\r\n     *     update: (oldValue, key, map) => {\r\n     *         return 'update';\r\n     *     }\r\n     * };\r\n     * hashmap.emplace('key', handler)\r\n     * // throws an Error as insert doesn't exist\r\n     * // hashmap = [['key', 'value']]\r\n     *\r\n     * @example <caption>Advanced: using a predefined hashCode and equals on the key</caption>\r\n     * class NameKey {\r\n     *     constructor(firstName, secondName) {\r\n     *         this.firstName = firstName;\r\n     *         this.secondName = secondName;\r\n     *     }\r\n     *     hashCode() {\r\n     *          return (Mootable.hash(firstName) * 31) +Mootable.hash(secondName);\r\n     *     }\r\n     *     equals(other) {\r\n     *          return other && other instanceof NameKey && other.firstName === this.firstName && other.secondName === this.secondName;\r\n     *     }\r\n     * }\r\n     * const handler = {\r\n     *     insert: (key, map) => {\r\n     *         return 'Librarian';\r\n     *     }\r\n     * };\r\n     * const hashmap = new HashMap();\r\n     * const ret = hashmap.emplace(new NameKey('John','Smith'),handler);\r\n     * // ret === 'Librarian'\r\n     * @example <caption>Advanced: using a custom hash and equals, to emplace a value to a specific\r\n     * hash</caption>\r\n     * const handler = {\r\n     *     insert: (key, map) => {\r\n     *         return 'value1';\r\n     *     }\r\n     * };\r\n     * const hashmap = new HashMap();\r\n     * const ret = hashmap.emplace(1,handler, {hash: 3});\r\n     * // ret === 'value1'\r\n     * // the hash of the number 3 is actually also 3. all 32 bit integers have the same hash.\r\n     * // 0 doesn't exist in the hashMap, but we are circumventing using the key entirely.\r\n     * @see {@link https://tc39.es/proposal-upsert/ upsert proposal}\r\n     * @see {@link https://github.com/tc39/proposal-upsert|Map.prototype.emplace}\r\n     * @param {*} key - the key we want to key our value to\r\n     * @param {HashMap#emplaceHandler<insert,update>} handler - the insert and update methods we\r\n     * want to use.\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.\r\n     * @return {*} the new value that was set, or overwrote.\r\n     * @throws {Error} if the insert method does not exist, and it can't find the key.\r\n     */\r\n    emplace(key, handler, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        return this.buckets.emplace(key, handler, op);\r\n    }\r\n\r\n    /**\r\n     * Copies all the entries from the map, array or iterable, into this hashmap.\r\n     *\r\n     * @example <caption>copy into the HashMap from an array of key value pairs</caption>\r\n     * const hashmap = new HashMap([['key0','value0']]);\r\n     * const arr = [[1,'value1'],[2,'value2'],[3,'value3']];\r\n     * hashmap.copy(arr);\r\n     * // hashmap.size === 4;\r\n     * @example <caption>copy into the HashMap from another map</caption>\r\n     * const hashmap = new HashMap([['key0','value0']]);\r\n     * const map = new Map([[1,'value1'],[2,'value2'],[3,'value3']])\r\n     * hashmap.copy(map);\r\n     * // hashmap.size === 4;\r\n     * @example <caption>copy into the HashMap from another HashMap</caption>\r\n     * const first = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']])\r\n     * const hashmap = new HashMap(first);\r\n     * // hashmap.size === 3;\r\n     * @example <caption>copy into the HashMap from a class with symbol iterator</caption>\r\n     * const hashmap = new HashMap([['key0','value0']]);\r\n     * class MyIterable = {\r\n     *     *[Symbol.iterator] () {\r\n     *         yield [\"key1\", \"value1\"];\r\n     *         yield [\"key2\", \"value2\"];\r\n     *         yield [\"key3\", \"value3\"];\r\n     *         yield [\"key4\", \"value4\"];\r\n     *     }\r\n     * }\r\n     * const iterable = new MyIterable();\r\n     * hashmap.copy(iterable);\r\n     * // hashmap.size === 5;\r\n     * // it doesn't have to be a generator, an iterator works too.\r\n     * @example <caption>copy into the HashMap from an object with an entries generator function</caption>\r\n     * const hashmap = new HashMap([['key0','value0']]);\r\n     * const entriesObj = {\r\n     *     entries: function* () {\r\n     *         yield [\"key1\", \"value1\"];\r\n     *         yield [\"key2\", \"value2\"];\r\n     *         yield [\"key3\", \"value3\"];\r\n     *         yield [\"key4\", \"value4\"];\r\n     *     }\r\n     * }\r\n     * hashmap.copy(entriesObj);\r\n     * // hashmap.size === 5;\r\n     * // it doesn't have to be a generator, an iterator works too.\r\n     * @example <caption>copy into the HashMap from an object with a forEach function</caption>\r\n     * const hashmap = new HashMap([['key0','value0']]);\r\n     * const forEachObj = {\r\n     *      forEach: (callback, ctx) => {\r\n     *              for (let i = 1; i <= 4; i++) {\r\n     *                  callback.call(ctx, 'value' + i, 'key' + i);\r\n     *              }\r\n     *      }\r\n     * };\r\n     * hashmap.copy(forEachObj);\r\n     * // hashmap.size === 5;\r\n     * @param {(Map|HashMap|LinkedHashMap|Iterable.<Array.<key,value>>|Object)} other - the\r\n     * iterable to copy\r\n     * @return {HashMap} this hashmap, with the values copied to it.\r\n     * @throws {TypeError} if the provided object other is null or not iterable.\r\n     */\r\n    copy(other) {\r\n        const map = this;\r\n        if (isIterable(other)) {\r\n            for (const [key, value] of other) {\r\n                map.set(key, value);\r\n            }\r\n            return this;\r\n        } else if (isFunction(other.entries)) {\r\n            for (const [key, value] of other.entries()) {\r\n                map.set(key, value);\r\n            }\r\n            return this;\r\n        } else if (isFunction(other.forEach)) {\r\n            other.forEach(function (value, key) {\r\n                map.set(key, value);\r\n            });\r\n            return this;\r\n        }\r\n        throw new TypeError('HashMap.copy expects an object which is iterable, has an entries iterable function, or has a forEach function on it');\r\n    }\r\n\r\n    /**\r\n     * Makes a full copy of this hashmap and returns the clone.\r\n     *\r\n     * @return {HashMap}\r\n     */\r\n    clone() {\r\n        return new HashMap(this);\r\n    }\r\n\r\n    /**\r\n     * Deletes an entry from this hashmap, using the provided key\r\n     * @param key\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.     * @return {HashMap}\r\n     */\r\n    delete(key, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        this.buckets.delete(key, op);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clears the data from this hashmap. All data is orphaned, and will be Garbage Collected.\r\n     * @return {HashMap} this hashmap\r\n     */\r\n    clear() {\r\n        this.buckets.clear();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Execute the provided callback on every <code>[key,value]</code> pair of this map iterable.\r\n     * @example <caption>Log all the keys and values.</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * mapIterable.forEach((value) => console.log(key, value));\r\n     * // will log to the console:\r\n     * // 1 value1\r\n     * // 2 value2\r\n     * // 3 value3\r\n     * // Ordering is deterministic on paper, but from a usability point of view effectively random\r\n     * // as it is ordered by a mix of the hash of the key, and order of insertion.\r\n     * @param {HashMap#ForEachCallback} [callback=(value, key, map) => {}]\r\n     * @param {*} [thisArg] Value to use as <code>this</code> when executing <code>forEachCallback</code>\r\n     * @returns {HashMap} the hashmap you are foreaching on..\r\n     */\r\n    forEach(callback, thisArg) {\r\n        for (const entry of this.entries()) {\r\n            callback.call(thisArg, entry[1], entry[0], this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Execute the provided callback on every <code>[key,value]</code> pair of this map iterable in reverse.\r\n     * @example <caption>Log all the keys and values.</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * mapIterable.forEachRight((value) => console.log(key, value));\r\n     * // will log to the console:\r\n     * // 3 value3\r\n     * // 2 value2\r\n     * // 1 value1\r\n     * // Ordering is deterministic on paper, but from a usability point of view effectively random\r\n     * // as it is ordered by a mix of the hash of the key, and order of insertion.\r\n     * @param {HashMap#ForEachCallback} [callback=(value, key, map) => {}]\r\n     * @param {*} [thisArg] Value to use as <code>this</code> when executing <code>forEachCallback</code>\r\n     * @returns {HashMap} the hashmap you are foreaching on..\r\n     */\r\n    forEachRight(callback, thisArg) {\r\n        for (const entry of this.entriesRight()) {\r\n            callback.call(thisArg, entry[1], entry[0], this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Test to see if ALL elements pass the test implemented by the passed <code>MatchesPredicate</code>.\r\n     * - if any element does not match, returns false\r\n     * - if all elements match, returns true.\r\n     * - if no elements match, returns false.\r\n     * - if the iterable is empty, returns true. (irrespective of the predicate)\r\n     * - if no predicate is provided, returns true.\r\n     *\r\n     * @example <caption>Do all values start with value. (yes)</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const everyResult = hashmap.every((value) => value.startsWith('value'));\r\n     * // everyResult === true\r\n     * @example <caption>Do all values start with value. (no)</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'doesntStart'],[3,'value3']]);\r\n     * const everyResult = hashmap.every((value) => value.startsWith('value'));\r\n     * // everyResult === false\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every|Array.every}\r\n     * @param {HashMap#MatchesPredicate} [everyPredicate=(value, key, iterable) => true] - if the provided function returns <code>false</code>, at any point the <code>every()</code> function returns false.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>everyPredicate</code>\r\n     * @param {HashMap#overrides<reverse>} [overrides] - a set of optional overrides to allow a user to define whether to search in reverse\r\n     * @returns {boolean} true if all elements match, false if one or more elements fails to match.\r\n     */\r\n    every(everyPredicate = () => true, thisArg = undefined, overrides = undefined) {\r\n        const iterator = overrides && overrides.reverse ? this.entriesRight() : this.entries();\r\n        for (const [key, value] of iterator) {\r\n            if (!everyPredicate.call(thisArg, value, key, this)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Test to see if ANY element pass the test implemented by the passed <code>MatchesPredicate</code>.\r\n     * - if any element matches, returns true.\r\n     * - if all elements match returns true.\r\n     * - if no elements match returns false.\r\n     * - if the iterable is empty, returns true.\r\n     * - if no predicate is provided, returns true.\r\n     *\r\n     * @example <caption>Do any values start with value. (yes all of them)</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const someResult = hashmap.some((value) => value.startsWith('value'));\r\n     * // someResult === true\r\n     * @example <caption>Do any values start with value. (yes 2 of them)</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'doesntStart'],[3,'value3']]);\r\n     * const someResult = hashmap.some((value) => value.startsWith('value'));\r\n     * // someResult === true\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some|Array.some}\r\n     * @param {HashMap#MatchesPredicate} [somePredicate=(value, key, iterable) => true] - the predicate to identify if we have a match.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>somePredicate</code>\r\n     * @param {HashMap#overrides<reverse>} [overrides] - a set of optional overrides to allow a user to define whether to search in reverse\r\n     * @returns {boolean} - true if all elements match, false if one or more elements fails to match.\r\n     */\r\n    some(somePredicate = () => true, thisArg = undefined, overrides = undefined) {\r\n        const iterator = overrides && overrides.reverse ? this.entriesRight() : this.entries();\r\n        for (const [key, value] of iterator) {\r\n            if (somePredicate.call(thisArg, value, key, this)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Iterate through the map reducing it to a single value.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce|Array.reduce}\r\n     * if initial value is <code>undefined</code> or <code>null</code>, unlike Array.reduce,\r\n     * no error occurs, and it is simply passed as the accumulator value\r\n     * @example <caption>add all the keys</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const reduceResult = hashmap.reduce((accumulator, value, key) => accumulator+key, 0);\r\n     * // reduceResult === 6\r\n     * @example <caption>add all the values into one string in reverse order</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const reduceResult = hashmap.reduce((accumulator, value) => value+accumulator, '');\r\n     * // reduceResult === 'value3value2value1'\r\n     * @param {HashMap#ReduceFunction} reduceFunction - the predicate to identify if we have a match.\r\n     * @param {*} [initialValue] the initial value to start on the reduce.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>reduceFunction</code>\r\n     * @returns {*} - the final accumulated value.\r\n     */\r\n    reduce(reduceFunction, initialValue, thisArg) {\r\n        let accumulator = initialValue;\r\n        if (initialValue === undefined) {\r\n            let first = true;\r\n            for (const [key, value] of this.entries()) {\r\n                if (first) {\r\n                    first = false;\r\n                    accumulator = value;\r\n                } else {\r\n                    accumulator = reduceFunction.call(thisArg, accumulator, value, key, this);\r\n                }\r\n            }\r\n        } else {\r\n            for (const [key, value] of this.entries()) {\r\n                accumulator = reduceFunction.call(thisArg, accumulator, value, key, this);\r\n            }\r\n        }\r\n        return accumulator;\r\n    }\r\n\r\n    /**\r\n     * Iterate backwards through the map reducing it to a single value.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight|Array.reduceRight}\r\n     * if initial value is <code>undefined</code> or <code>null</code>, unlike Array.reduceRight,\r\n     * no error occurs, and it is simply passed as the accumulator value\r\n     * @example <caption>add all the keys</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const reduceResult = hashmap.reduceRight((accumulator, value, key) => accumulator+key, 0);\r\n     * // reduceResult === 6\r\n     * @example <caption>add all the values into one string in reverse order</caption>\r\n     * const hashmap = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']]);\r\n     * const reduceResult = hashmap.reduceRight((accumulator, value) => value+accumulator, '');\r\n     * // reduceResult === 'value1value2value3'\r\n     * @param {HashMap#ReduceFunction} reduceFunction - the predicate to identify if we have a match.\r\n     * @param {*} [initialValue] the initial value to start on the reduce.\r\n     * @param {*} [thisArg] - Value to use as <code>this</code> when executing <code>reduceFunction</code>\r\n     * @returns {*} - the final accumulated value.\r\n     */\r\n    reduceRight(reduceFunction, initialValue, thisArg) {\r\n        let accumulator = initialValue;\r\n        if (initialValue === undefined) {\r\n            let first = true;\r\n            for (const [key, value] of this.entriesRight()) {\r\n                if (first) {\r\n                    first = false;\r\n                    accumulator = value;\r\n                } else {\r\n                    accumulator = reduceFunction.call(thisArg, accumulator, value, key, this);\r\n                }\r\n            }\r\n        } else {\r\n            for (const [key, value] of this.entriesRight()) {\r\n                accumulator = reduceFunction.call(thisArg, accumulator, value, key, this);\r\n            }\r\n        }\r\n        return accumulator;\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the entries in the map.\r\n     *\r\n     * @yields {entries:Array.<key,value>} each entry in the map\r\n     */\r\n    * [Symbol.iterator]() {\r\n        yield* this.entries();\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the entries in the map.\r\n     *\r\n     * @yields {entries:Array.<key,value>} each entry in the map\r\n     */\r\n    * entries() {\r\n        yield* this.buckets;\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the entries in the map.\r\n     *\r\n     * @yields {entries:Array.<key,value>} each entry in the map in reverse order\r\n     */\r\n    * entriesRight() {\r\n        yield* this.buckets.entriesRight();\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the keys in the map.\r\n     *\r\n     * @yields {key:any} each key in the map\r\n     */\r\n    * keys() {\r\n        yield* this.buckets.keys();\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the values in the map.\r\n     *\r\n     * @yields {value:any} each value in the map.\r\n     */\r\n    * values() {\r\n        yield* this.buckets.values();\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the keys in the map in reverse.\r\n     *\r\n     * @yields {key:any} each key in the map in reverse order\r\n     */\r\n    * keysRight() {\r\n        yield* this.buckets.keysRight();\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the values in the map in reverse.\r\n     *\r\n     * @yields {value:any} each value in the map in reverse order\r\n     */\r\n    * valuesRight() {\r\n        yield* this.buckets.valuesRight();\r\n    }\r\n\r\n    // Private\r\n\r\n    /**\r\n     * Create a container for this hashmap, overridden by {@link LinkedHashMap}\r\n     * This is an internal method, used for extension of hashmaps.\r\n     * It allows for control of the leaves without having to mess with the hashbuckets and hamtpbuckets.\r\n     * @private\r\n     * @param {*} parent the parent of the container.\r\n     * @param {number} hash the hash we want to assign to the container\r\n     * @return {Container} the created container.\r\n     */\r\n    createContainer(parent, hash) {\r\n        return new Container(this, parent, hash);\r\n    }\r\n}\r\n\r\n/*\r\n * Method parsing\r\n */\r\nObject.defineProperty(HashMap.prototype, 'equalsFor', {value: equalsFor, configurable: true});\r\nObject.defineProperty(HashMap.prototype, 'equalsAndHash', {\r\n    value: equalsAndHash,\r\n    configurable: true\r\n});\r\n","import {HashMap} from '../hashmap/';\r\nimport {Container} from '../hashmap/container';\r\nimport {some, none} from \"../option\";\r\n\r\n/**\r\n * HashMap - LinkedHashMap Implementation for JavaScript\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n * This LinkedHashMap is is an extension of {@link HashMap} however LinkedHashMap also maintains insertion order of keys, and guarantees to iterate over them in that order.\r\n * @extends HashMap\r\n */\r\nexport class LinkedHashMap extends HashMap {\r\n\r\n    /**\r\n     * This LinkedHashMap is is an extension of {@link HashMap} however LinkedHashMap also maintains insertion order of keys, and guarantees to iterate over them in that order.\r\n     * - `new LinkedHashMap()` creates an empty linked hashmap\r\n     * - `new LinkedHashMap(copy:Iterable)` creates a linked hashmap which is a copy of the provided iterable.\r\n     *   - One of\r\n     *      - an object that provides a [Symbol.Iterator] function with the same signature as `Map.[Symbol.Iterator]`, such as `Map` or this `HashMap` and `LinkedHashMap`\r\n     *          - or a 2 dimensional key-value array, e.g. `[['key1','val1'], ['key2','val2']]`.\r\n     *      - an object that provides a entries function with the same signature as `Map.entries`, such as `Map` or this `HashMap` and `LinkedHashMap`\r\n     *      - an object that provides a forEach function with the same signature as `Map.forEach`, such as `Map` or this `HashMap` and `LinkedHashMap`\r\n     *\r\n     * @example <caption>Create an empty LinkedHashMap</caption>\r\n     * const linkedhashmap = new LinkedHashMap();\r\n     * // linkedhashmap.size === 0;\r\n     * @example <caption>Create LinkedHashMap from an array of key value pairs</caption>\r\n     * const arr = [[1,'value1'],[2,'value2'],[3,'value3']];\r\n     * const linkedhashmap = new LinkedHashMap(arr);\r\n     * // linkedhashmap.size === 3;\r\n     * @example <caption>Create LinkedHashMap from another map</caption>\r\n     * const map = new Map([[1,'value1'],[2,'value2'],[3,'value3']])\r\n     * const linkedhashmap = new LinkedHashMap(map);\r\n     * // linkedhashmap.size === 3;\r\n     * @example <caption>Create LinkedHashMap from another HashMap</caption>\r\n     * const first = new HashMap([[1,'value1'],[2,'value2'],[3,'value3']])\r\n     * const linkedhashmap = new LinkedHashMap(first);\r\n     * // linkedhashmap.size === 3;\r\n     * // will accept LinkedHashMap as well\r\n     * @example <caption>Create LinkedHashMap from a class with symbol iterator</caption>\r\n     * class MyIterable = {\r\n     *     *[Symbol.iterator] () {\r\n     *         yield [\"key1\", \"value1\"];\r\n     *         yield [\"key2\", \"value2\"];\r\n     *         yield [\"key3\", \"value3\"];\r\n     *         yield [\"key4\", \"value4\"];\r\n     *     }\r\n     * }\r\n     * const iterable = new MyIterable();\r\n     * const linkedhashmap = new LinkedHashMap(iterable);\r\n     * // linkedhashmap.size === 4;\r\n     * // it doesn't have to be a generator, an iterator works too.\r\n     * @example <caption>Create LinkedHashMap from an object with an entries generator function</caption>\r\n     * const entriesObj = {\r\n     *     entries: function* () {\r\n     *         yield [\"key1\", \"value1\"];\r\n     *         yield [\"key2\", \"value2\"];\r\n     *         yield [\"key3\", \"value3\"];\r\n     *         yield [\"key4\", \"value4\"];\r\n     *     }\r\n     * }\r\n     * const linkedhashmap = new LinkedHashMap(entriesObj);\r\n     * // linkedhashmap.size === 4;\r\n     * // it doesn't have to be a generator, an iterator works too.\r\n     * @example <caption>Create LinkedHashMap from an object with a forEach function</caption>\r\n     * const forEachObj = {\r\n     *      forEach: (callback, ctx) => {\r\n     *              for (let i = 1; i <= 4; i++) {\r\n     *                  callback.call(ctx, 'value' + i, 'key' + i);\r\n     *              }\r\n     *      }\r\n     * };\r\n     * const linkedhashmap = new LinkedHashMap(forEachObj);\r\n     * // linkedhashmap.size === 4;\r\n     * @param {(Map|HashMap|LinkedHashMap|Iterable.<Array.<key,value>>|Object)} [copy]\r\n     */\r\n    constructor(copy) {\r\n        super(copy);\r\n        if (this.size === 0) {\r\n            this.start = undefined;\r\n            this.end = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @return {HashMap}\r\n     */\r\n    clear() {\r\n        this.start = undefined;\r\n        this.end = undefined;\r\n        return super.clear();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param value\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.     * @return {HashMap}\r\n     * @return {LinkedHashMap}\r\n     */\r\n    setLeft(key, value, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        op.addToStart = true;\r\n        this.buckets.set(key, value, op);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param handler\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.     * @return {HashMap}\r\n     * @return {*}\r\n     */\r\n    emplaceLeft(key, handler, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        op.addToStart = true;\r\n        return this.buckets.emplace(key, handler, op);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param value\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.     * @return {HashMap}\r\n     * @return {LinkedHashMap}\r\n     */\r\n    push(key, value, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        op.moveOnUpdate = true;\r\n        this.buckets.set(key, value, op);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param handler\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.     * @return {HashMap}\r\n     * @return {*}\r\n     */\r\n    pushEmplace(key, handler, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        op.moveOnUpdate = true;\r\n        return this.buckets.emplace(key, handler, op);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param value\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.     * @return {HashMap}\r\n     * @return {LinkedHashMap}\r\n     */\r\n    unshift(key, value, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        op.moveOnUpdate = true;\r\n        op.addToStart = true;\r\n        this.buckets.set(key, value, op);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param handler\r\n     * @param {HashMap#overrides<equals, hash>} [overrides] - a set of optional overrides to allow a user to define the hashcode and equals methods, rather than them being looked up.     * @return {HashMap}\r\n     * @return {*}\r\n     */\r\n    unshiftEmplace(key, handler, overrides) {\r\n        const op = this.equalsAndHash(key, overrides);\r\n        op.moveOnUpdate = true;\r\n        op.addToStart = true;\r\n        return this.buckets.emplace(key, handler, op);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {undefined|*}\r\n     */\r\n    shift() {\r\n        const entry = this.start;\r\n        if (entry) {\r\n            entry.parent.deleteEntry(entry);\r\n            return entry.slice();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {undefined|*}\r\n     */\r\n    pop() {\r\n        const entry = this.end;\r\n        if (entry) {\r\n            entry.parent.deleteEntry(entry);\r\n            return entry.slice();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {undefined|*}\r\n     */\r\n    head() {\r\n        const entry = this.start;\r\n        if (entry) {\r\n            return entry[1];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {undefined|*}\r\n     */\r\n    tail() {\r\n        const entry = this.end;\r\n        if (entry) {\r\n            return entry[1];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {Option}\r\n     */\r\n    optionalHead() {\r\n        const entry = this.start;\r\n        if (entry) {\r\n            return some(entry[1]);\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {Option}\r\n     */\r\n    optionalTail() {\r\n        const entry = this.end;\r\n        if (entry) {\r\n            return some(entry[1]);\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {undefined|*}\r\n     */\r\n    headKey() {\r\n        const entry = this.start;\r\n        if (entry) {\r\n            return entry[0];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {undefined|*}\r\n     */\r\n    tailKey() {\r\n        const entry = this.end;\r\n        if (entry) {\r\n            return entry[0];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {Option}\r\n     */\r\n    optionalHeadKey() {\r\n        const entry = this.start;\r\n        if (entry) {\r\n            return some(entry[0]);\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {Option}\r\n     */\r\n    optionalTailKey() {\r\n        const entry = this.end;\r\n        if (entry) {\r\n            return some(entry[0]);\r\n        }\r\n        return none;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @return {LinkedHashMap}\r\n     */\r\n    reverse(){\r\n        if(this.size > 1){\r\n            let entry = this.start;\r\n            do {\r\n                const previous = entry.previous;\r\n                const next = entry.next;\r\n                entry.previous = next;\r\n                entry.next = previous;\r\n                entry = next;\r\n            } while(entry);\r\n            const start = this.start;\r\n            this.start = this.end;\r\n            this.end = start;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Makes a copy of this LinkedHashMap\r\n     * @return {LinkedHashMap}\r\n     */\r\n    clone() {\r\n        return new LinkedHashMap(this);\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the entries in the map.\r\n     *\r\n     * @yields {entries:Array.<key,value>} each entry in the map\r\n     */\r\n    * [Symbol.iterator]() {\r\n        yield* this.entries();\r\n    }\r\n    /**\r\n     * Iterates over all the entries in the map.\r\n     *\r\n     * @yields {entries:Array.<key,value>} each entry in the map\r\n     */\r\n    * entries() {\r\n        let entry = this.start;\r\n        while (entry) {\r\n            yield entry.slice();\r\n            entry = entry.next;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the entries in the map in reverse order.\r\n     *\r\n     * @yields {entries:Array.<key,value>} each entry in the map in reverse order\r\n     */\r\n    * entriesRight() {\r\n        let entry = this.end;\r\n        while (entry) {\r\n            yield entry.slice();\r\n            entry = entry.previous;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the keys in the map.\r\n     *\r\n     * @yields {key:any} each key in the map\r\n     */\r\n    * keys() {\r\n        let entry = this.start;\r\n        while (entry) {\r\n            yield entry[0];\r\n            entry = entry.next;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the values in the map.\r\n     *\r\n     * @yields {value:any} each value in the map\r\n     */\r\n    * values() {\r\n        let entry = this.start;\r\n        while (entry) {\r\n            yield entry[1];\r\n            entry = entry.next;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the keys in the map in reverse.\r\n     * @yields {key:any} each key in the map in reverse order\r\n     */\r\n    * keysRight() {\r\n        let entry = this.end;\r\n        while (entry) {\r\n            yield entry[0];\r\n            entry = entry.previous;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over all the values in the map in reverse.\r\n     * @yields {value:any} each value in the map in reverse order\r\n     */\r\n    * valuesRight() {\r\n        let entry = this.end;\r\n        while (entry) {\r\n            yield entry[1];\r\n            entry = entry.previous;\r\n        }\r\n    }\r\n\r\n// private\r\n\r\n    /**\r\n     * @private\r\n     * @param parent\r\n     * @param hash\r\n     * @return {LinkedContainer}\r\n     */\r\n    createContainer(parent, hash) {\r\n        return new LinkedContainer(this, parent, hash);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Holds multiple entries, but shrinks to a single container if reduced to a size of one.\r\n * @private\r\n */\r\nexport class LinkedContainer extends Container {\r\n\r\n    constructor(map, parent, hash) {\r\n        super(map, parent, hash);\r\n    }\r\n\r\n    createEntry(key, value, overrides) {\r\n        const entry = super.createEntry(key, value, overrides);\r\n        const map = this.map;\r\n        if (map.start === undefined) {\r\n            map.end = map.start = entry;\r\n        } else if (overrides.addToStart) {\r\n            map.start.previous = entry;\r\n            entry.next = map.start;\r\n            map.start = entry;\r\n        } else {\r\n            map.end.next = entry;\r\n            entry.previous = map.end;\r\n            map.end = entry;\r\n        }\r\n        return entry;\r\n    }\r\n\r\n    updateEntry(entry, newValue, overrides) {\r\n        super.updateEntry(entry, newValue, overrides);\r\n        if (overrides.moveOnUpdate) {\r\n            if (overrides.addToStart) {\r\n                if (entry.previous) {\r\n                    if (entry.next) {\r\n                        entry.next.previous = entry.previous;\r\n                    }\r\n                    entry.previous.next = entry.next;\r\n                    if (entry === this.map.end) {\r\n                        this.map.end = entry.previous;\r\n                    }\r\n                    entry.previous = undefined;\r\n                    this.map.start.previous = entry;\r\n                    entry.next = this.map.start;\r\n                    this.map.start = entry;\r\n                }\r\n            } else if (entry.next) {\r\n                if (entry.previous) {\r\n                    entry.previous.next = entry.next;\r\n                }\r\n                entry.next.previous = entry.previous;\r\n                if (entry === this.map.start) {\r\n                    this.map.start = entry.next;\r\n                }\r\n                entry.next = undefined;\r\n                this.map.end.next = entry;\r\n                entry.previous = this.map.end;\r\n                this.map.end = entry;\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteIndex(idx) {\r\n        const oldEntry = super.deleteIndex(idx);\r\n        const map = this.map;\r\n        if (oldEntry.previous) {\r\n            oldEntry.previous.next = oldEntry.next;\r\n        } else {\r\n            map.start = oldEntry.next;\r\n        }\r\n        if (oldEntry.next) {\r\n            oldEntry.next.previous = oldEntry.previous;\r\n        } else {\r\n            map.end = oldEntry.previous;\r\n        }\r\n    }\r\n}","/*\r\n * @author Jack Moxley\r\n * @copyright Jack Moxley <https://github.com/jackmoxley>\r\n * @licence MIT\r\n */\r\n\r\nimport {HashMap} from \"./hashmap/\";\r\nimport {LinkedHashMap} from \"./linkedhashmap/\";\r\nimport {\r\n    isFunction,\r\n    isIterable,\r\n    isString,\r\n    sameValueZero,\r\n    strictEquals,\r\n    abstractEquals,\r\n    sameValue,\r\n    hammingWeight\r\n} from './utils/';\r\nimport {hash, equalsAndHash, hashCodeFor, equalsFor} from './hashmap/hash';\r\nimport {none, some, Option} from './option/';\r\n\r\nconst Mootable = {\r\n    HashMap,\r\n    LinkedHashMap,\r\n    hash,\r\n    isFunction,\r\n    isIterable,\r\n    isString,\r\n    equalsAndHash,\r\n    hashCodeFor,\r\n    equalsFor,\r\n    some,\r\n    none,\r\n    Option,\r\n    sameValueZero, strictEquals, abstractEquals, sameValue, hammingWeight\r\n};\r\n\r\n\r\nexport {\r\n    HashMap,\r\n    LinkedHashMap,\r\n    Mootable\r\n};\r\nexport default LinkedHashMap;\r\n"],"names":["check","it","Math","global","globalThis","window","self","this","Function","fails","exec","error","toString","classof","call","slice","split","requireObjectCoercible","undefined","TypeError","IndexedObject","require$$0","Object","propertyIsEnumerable","require$$1","toIndexedObject","descriptors","defineProperty","get","isObject","document","EXISTS","createElement","documentCreateElement","require$$2","ie8DomDefine","a","anObject","String","toPrimitive","input","PREFERRED_STRING","fn","val","valueOf","DESCRIPTORS","IE8_DOM_DEFINE","require$$3","$defineProperty","O","P","Attributes","value","createPropertyDescriptor","bitmap","enumerable","configurable","writable","definePropertyModule","createNonEnumerableProperty","object","key","f","setGlobal","SHARED","sharedStore","store","sharedModule","push","version","mode","copyright","match","toObject","argument","hasOwnProperty","has","id","postfix","random","uid","path","aFunction","variable","getBuiltIn","namespace","method","arguments","length","userAgent","process","versions","v8","activeXDocument","V8_VERSION","nativeSymbol","getOwnPropertySymbols","Symbol","sham","useSymbolAsUid","iterator","shared","NATIVE_SYMBOL","require$$4","USE_SYMBOL_AS_UID","require$$5","WellKnownSymbolsStore","createWellKnownSymbol","withoutSetter","wellKnownSymbol","name","ceil","floor","toInteger","isNaN","min","max","toLength","toAbsoluteIndex","index","integer","createMethod","IS_INCLUDES","$this","el","fromIndex","arrayIncludes","includes","indexOf","hiddenKeys","objectKeysInternal","names","i","result","enumBugKeys","internalObjectKeys","objectKeys","keys","objectDefineProperties","defineProperties","Properties","html","sharedKey","IE_PROTO","require$$6","EmptyConstructor","scriptTag","content","LT","NullProtoObject","domain","ActiveXObject","iframeDocument","iframe","write","close","temp","parentWindow","NullProtoObjectViaActiveX","style","display","appendChild","src","contentWindow","open","F","objectCreate","create","UNSCOPABLES","ArrayPrototype","Array","prototype","functionToString","inspectSource","set","WeakMap","NATIVE_WEAK_MAP","test","objectHas","require$$7","OBJECT_ALREADY_INITIALIZED","state","wmget","wmhas","wmset","metadata","facade","STATE","internalState","enforce","getterFor","TYPE","type","$propertyIsEnumerable","getOwnPropertyDescriptor","NASHORN_BUG","1","V","descriptor","propertyIsEnumerableModule","$getOwnPropertyDescriptor","getInternalState","enforceInternalState","TEMPLATE","redefineModule","options","unsafe","simple","noTargetGet","source","join","concat","getOwnPropertyNames","IteratorPrototype","PrototypeOfArrayIteratorPrototype","arrayIterator","getOwnPropertyNamesModule","getOwnPropertySymbolsModule","ownKeys","getOwnPropertyDescriptorModule","replacement","isForced","feature","detection","data","normalize","POLYFILL","NATIVE","string","replace","toLowerCase","isForced_1","redefine","copyConstructorProperties","target","correctPrototypeGetter","constructor","getPrototypeOf","CORRECT_PROTOTYPE_GETTER","ObjectPrototype","objectGetPrototypeOf","ITERATOR","BUGGY_SAFARI_ITERATORS","iteratorsCore","TO_STRING_TAG","setToStringTag","TAG","STATIC","aPossiblePrototype","objectSetPrototypeOf","setPrototypeOf","setter","CORRECT_SETTER","proto","__proto__","$","targetProperty","sourceProperty","TARGET","GLOBAL","stat","forced","createIteratorConstructor","IteratorConstructor","NAME","next","require$$10","KEYS","VALUES","ENTRIES","returnThis","addToUnscopables","InternalStateModule","defineIterator","Iterable","DEFAULT","IS_SET","FORCED","CurrentIteratorPrototype","methods","KEY","getIterationMethod","KIND","defaultIterator","IterablePrototype","INCORRECT_VALUES_NAME","nativeIterator","anyNativeIterator","entries","values","ARRAY_ITERATOR","setInternalState","es_array_iterator","iterated","kind","done","DOMIterables","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","ArrayIteratorMethods","ArrayValues","COLLECTION_NAME","Collection","CollectionPrototype","METHOD_NAME","isFunction","func","apply","isIterable","iterable","sameValue","is","sameValueZero","x","y","Number","strictEquals","hammingWeight","flags","Option","freeze","none","some","Container","map","parent","hash","size","contents","hashConflicts","equals","entry","optionalGet","find","updateEntry","createEntry","emplace","handler","update","insert","newValue","deleteEntry","idx","deleteIndex","shift","pop","splice","delete","findIndex","MASK","WIDTH","HashBuckets","buckets","clear","bucketFor","bucket","createContainer","HamtBuckets","DEPTH","replacing","entriesRight","keysRight","valuesRight","depth","idxFlags","flag","WIDTH_HAMT","oldBucket","new_flag","len","seed","remaining","doubleBytes","k","charCodeAt","hashCodeFor","isFinite","isSafeInteger","hashCode","Date","getTime","RegExp","_mootable_hashCode","HASH_COUNTER","equalsFor","me","them","valueEquals","equalsAndHash","toSetOn","HashMap","copy","overrides","op","keyOf","lastKeyOf","optionalKeyOf","optionalLastKeyOf","findPredicate","thisArg","findLast","optionalFind","optionalFindLast","findKey","findKeyPredicate","findLastKey","optionalFindKey","optionalFindLastKey","other","forEach","clone","callback","forEachRight","every","everyPredicate","reverse","somePredicate","reduce","reduceFunction","initialValue","accumulator","first","reduceRight","LinkedHashMap","start","end","super","setLeft","addToStart","emplaceLeft","moveOnUpdate","pushEmplace","unshift","unshiftEmplace","head","tail","optionalHead","optionalTail","headKey","tailKey","optionalHeadKey","optionalTailKey","previous","LinkedContainer","oldEntry","Mootable","isString","str","abstractEquals"],"mappings":"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"}